"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ HPI.
"""
import os
import re
import logging
from datetime import datetime
from typing import Dict, List, Optional
from dataclasses import dataclass
from ..normalizers import SphereNormalizer
from .pro_data import ProMetric
import json


@dataclass
class HistoricalScore:
    """–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–π —Å—Ñ–µ—Ä–µ."""
    sphere: str
    date: datetime
    score: float
    emoji: str


@dataclass
class HistoricalReport:
    """–î–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
    date: datetime
    hpi: float
    scores: Dict[str, float]
    file_path: str
    metrics: Optional[List[ProMetric]] = None
    problems: Optional[Dict[str, list]] = None
    goals: Optional[Dict[str, list]] = None
    blockers: Optional[Dict[str, list]] = None
    achievements: Optional[Dict[str, list]] = None
    general_notes: Optional[Dict[str, str]] = None


class HistoryParser:
    """–ü–∞—Ä—Å–µ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""

    def __init__(self, reports_dir: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞.
        
        Args:
            reports_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –æ—Ç—á–µ—Ç–∞–º–∏
        """
        self.reports_dir = reports_dir
        self.logger = logging.getLogger(__name__)
        self.sphere_normalizer = SphereNormalizer()

    def _extract_date_from_filename(self, filename: str) -> Optional[datetime]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            –û–±—ä–µ–∫—Ç datetime –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É
        """
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è YYYY-MM-DD
        match = re.match(r'(\d{4}-\d{2}-\d{2})', filename)
        if match:
            try:
                return datetime.strptime(match.group(1), '%Y-%m-%d')
            except ValueError:
                self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {filename}")
                return None
        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {filename}")
        return None

    def _extract_hpi(self, content: str) -> Optional[float]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ HPI –∏–∑ –æ—Ç—á–µ—Ç–∞.
        
        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ HPI –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        pattern = r'\|\s*\*\*–ò—Ç–æ–≥–æ–≤—ã–π HPI\*\*\s*\|\s*\*\*(\d+\.\d+)\*\*\s*\|\s*[üü°üîµüî¥üü¢]\s*\|'
        match = re.search(pattern, content)
        if match:
            return float(match.group(1))
            
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã
        pattern = r'\|\s*\*\*–ò—Ç–æ–≥–æ–≤—ã–π HPI\*\*\s*\|\s*\*\*(\d+\.\d+)\*\*\s*\|'
        match = re.search(pattern, content)
        if match:
            return float(match.group(1))
            
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
        pattern = r'HPI:\s*(\d+\.\d+)\s*[üü°üîµüî¥üü¢]'
        match = re.search(pattern, content)
        if match:
            return float(match.group(1))
            
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ
        pattern = r'\|\s*\*\*–ò—Ç–æ–≥–æ–≤—ã–π HPI\*\*\s*\|\s*\*\*(\d+\.\d+)\*\*\s*\|\s*[üü°üîµüî¥üü¢]\s*\|'
        match = re.search(pattern, content)
        return float(match.group(1)) if match else None

    def _extract_scores(self, content: str) -> Dict[str, float]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Å—Ñ–µ—Ä –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
        
        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è_—Å—Ñ–µ—Ä–∞: –æ—Ü–µ–Ω–∫–∞}
        """
        scores = {}
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å –±–∞–ª–ª–∞–º–∏
        pattern = r'\|\s*([^|]+?)\s*\|\s*(\d+\.\d+)\s*\|\s*[üü°üîµüî¥]\s*\|'
        matches = re.finditer(pattern, content)
        
        for match in matches:
            sphere_identifier = match.group(1).strip()
            value = float(match.group(2))
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å HPI
            if '–ò—Ç–æ–≥–æ–≤—ã–π HPI' in sphere_identifier:
                continue
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ñ–µ—Ä—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —ç–º–æ–¥–∑–∏
            normalized_sphere = self.sphere_normalizer.normalize(sphere_identifier)
            
            if normalized_sphere:
                scores[normalized_sphere] = value
            else:
                self.logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ñ–µ—Ä—É: '{sphere_identifier}'"
                )
                
        return scores

    def parse_report(self, file_path: str) -> Optional[HistoricalReport]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
            
        Returns:
            –û–±—ä–µ–∫—Ç HistoricalReport –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            filename = os.path.basename(file_path)
            date = self._extract_date_from_filename(filename)
            if not date:
                return None
                
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            hpi = self._extract_hpi(content)
            scores = self._extract_scores(content)

            # --- –ù–æ–≤—ã–π –∫–æ–¥: –ø–∞—Ä—Å–∏–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ---
            metrics = []
            # –ò—â–µ–º —Å–µ–∫—Ü–∏—é –º–µ—Ç—Ä–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
            metric_section_match = re.search(r'(?:üìä –ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏|–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏)[^\n]*\n((?:\|.*\n)+)', content)
            if metric_section_match:
                from .pro_data import ProDataParser
                parser = ProDataParser()
                metrics = parser._parse_metrics_section(metric_section_match.group(1))
            # --- –ö–æ–Ω–µ—Ü –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ ---

            # --- –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è PRO-—Å–µ–∫—Ü–∏–π –∏–∑ JSON-–±–ª–æ–∫–∞ ---
            problems = goals = blockers = achievements = general_notes = None
            json_block_match = re.search(r'```json\n(.*?)\n```', content, re.DOTALL)
            if json_block_match:
                try:
                    pro_json = json.loads(json_block_match.group(1))
                    problems = pro_json.get('problems')
                    goals = pro_json.get('goals')
                    blockers = pro_json.get('blockers')
                    achievements = pro_json.get('achievements')
                    general_notes = pro_json.get('general_notes')
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON-–±–ª–æ–∫–∞ PRO-—Å–µ–∫—Ü–∏–π: {e}")
            # --- –ö–æ–Ω–µ—Ü –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ---
            
            if not hpi or not scores:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç—á–µ—Ç–∞: {file_path}")
                return None
                
            return HistoricalReport(
                date=date,
                hpi=hpi,
                scores=scores,
                file_path=file_path,
                metrics=metrics,
                problems=problems,
                goals=goals,
                blockers=blockers,
                achievements=achievements,
                general_notes=general_notes
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç—á–µ—Ç–∞ {file_path}: {e}")
            return None

    def get_history(self) -> List[HistoricalReport]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –≤—Å–µ—Ö —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –¥—Ä–∞—Ñ—Ç–∞–º.
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ HistoricalReport
        """
        history = []
        if not os.path.exists(self.reports_dir):
            self.logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –æ—Ç—á–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.reports_dir}")
            return history
        for filename in os.listdir(self.reports_dir):
            file_path = os.path.join(self.reports_dir, filename)
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'images')
            if os.path.isdir(file_path):
                continue
            if not filename.endswith('_report.md'):
                continue
            date = self._extract_date_from_filename(filename)
            if not date:
                continue
            report = self.parse_report(file_path)
            if report:
                history.append(report)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        history.sort(key=lambda r: r.date)
        return history

    def get_sphere_history(self, sphere: str) -> List[HistoricalScore]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ü–µ–Ω–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ñ–µ—Ä—ã.
        
        Args:
            sphere: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ HistoricalScore
        """
        history = []
        emoji = self.sphere_normalizer.get_emoji_by_sphere(sphere)
        
        if not emoji:
            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ñ–µ—Ä–∞: {sphere}")
            return []
            
        for report in self.get_history():
            score = report.scores.get(sphere)
            if score is not None:
                history.append(
                    HistoricalScore(
                        sphere=sphere,
                        date=report.date,
                        score=score,
                        emoji=emoji
                    )
                )
                
        return history 