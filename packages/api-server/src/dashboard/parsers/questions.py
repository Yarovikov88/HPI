"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∞–∑—ã –≤–æ–ø—Ä–æ—Å–æ–≤ HPI.
"""
import os
import re
import json
import logging
from typing import Dict, List, Optional
from dataclasses import dataclass
from ..normalizers import SphereNormalizer


@dataclass
class MetricDefinition:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –±–∞–∑—ã –≤–æ–ø—Ä–æ—Å–æ–≤."""
    name: str
    unit: Optional[str] = None
    type: Optional[str] = None


@dataclass
class SphereMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ñ–µ—Ä—ã."""
    sphere_name: str
    sphere_emoji: str
    metrics: List[MetricDefinition]


class QuestionsDatabaseParser:
    """–ü–∞—Ä—Å–µ—Ä –±–∞–∑—ã –≤–æ–ø—Ä–æ—Å–æ–≤ HPI."""

    def __init__(self, database_path: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞.
        
        Args:
            database_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –≤–æ–ø—Ä–æ—Å–æ–≤ (questions.md)
        """
        self.database_path = database_path
        self.sphere_normalizer = SphereNormalizer()
        self.logger = logging.getLogger(__name__)

    def _extract_json_blocks(self, content: str) -> Dict[str, str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON-–±–ª–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
        
        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –≤–æ–ø—Ä–æ—Å–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ñ–µ—Ä—ã: json_–±–ª–æ–∫}
        """
        json_blocks = {}
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏–ø–∞ "## üíñ –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏" –∏ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞ –Ω–∏–º –±–ª–æ–∫ ```json ... ```
        pattern = re.compile(
            r"##\s*(?P<emoji>[\U0001F000-\U0001FA95\s\S]+?)\s*(?P<name>.*?)\n```json\n([\s\S]+?)\n```",
            re.DOTALL
        )
        
        for match in pattern.finditer(content):
            emoji = match.group('emoji').strip()
            name = match.group('name').strip()
            json_content = match.group(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è —Å—Ñ–µ—Ä–∞
            sphere = self.sphere_normalizer.get_sphere_by_emoji(emoji)
            if sphere:
                json_blocks[sphere] = json_content
            else:
                self.logger.warning(f"–ù–∞–π–¥–µ–Ω –±–ª–æ–∫ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —ç–º–æ–¥–∑–∏: {emoji}")
                
        return json_blocks

    def _parse_metrics_from_json(self, json_content: str) -> List[MetricDefinition]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∏–∑ JSON-–±–ª–æ–∫–∞.
        
        Args:
            json_content: JSON-—Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ñ–µ—Ä—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫
        """
        metrics = []
        try:
            data = json.loads(json_content)
            for item in data:
                if item.get("category") == "metrics" and "metrics" in item:
                    for metric in item["metrics"]:
                        metrics.append(
                            MetricDefinition(
                                name=metric.get("name", ""),
                                unit=metric.get("unit"),
                                type=metric.get("type")
                            )
                        )
        except json.JSONDecodeError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        
        return metrics

    def parse(self) -> List[SphereMetrics]:
        """
        –ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª –±–∞–∑—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å—Ñ–µ—Ä–∞–º.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ SphereMetrics —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
        """
        if not os.path.exists(self.database_path):
            self.logger.error(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.database_path}")
            return []
            
        try:
            with open(self.database_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            return []
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON-–±–ª–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
        json_blocks = self._extract_json_blocks(content)
        
        # –ü–∞—Ä—Å–∏–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
        sphere_metrics = []
        for sphere_name, json_content in json_blocks.items():
            metrics = self._parse_metrics_from_json(json_content)
            if metrics:
                sphere_metrics.append(
                    SphereMetrics(
                        sphere_name=sphere_name,
                        sphere_emoji=self.sphere_normalizer.get_emoji_by_sphere(sphere_name),
                        metrics=metrics
                    )
                )
            
        self.logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {len(sphere_metrics)} —Å—Ñ–µ—Ä")
        return sphere_metrics

    def get_metric_names(self, sphere: Optional[str] = None) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫.
        
        Args:
            sphere: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç—Ä–∏–∫
        """
        metrics = []
        for sphere_metrics in self.parse():
            if not sphere or sphere_metrics.sphere_name == sphere:
                metrics.extend([m.name for m in sphere_metrics.metrics])
        return metrics

    def parse_spheres_master_list(self) -> List[str]:
        """
        –ü–∞—Ä—Å–∏—Ç master-—Ç–∞–±–ª–∏—Ü—É —Å—Ñ–µ—Ä –∏–∑ –Ω–∞—á–∞–ª–∞ —Ñ–∞–π–ª–∞ questions.md –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ñ–µ—Ä.
        """
        if not os.path.exists(self.database_path):
            self.logger.error(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.database_path}")
            return []
        try:
            with open(self.database_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            return []
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ñ–µ—Ä
        pattern = re.compile(r"\|\s*–ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\s*\|.*?\n(\|.*?\n)+", re.DOTALL)
        match = pattern.search(content)
        if not match:
            self.logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ master-—Ç–∞–±–ª–∏—Ü–∞ —Å—Ñ–µ—Ä –≤ –±–∞–∑–µ –≤–æ–ø—Ä–æ—Å–æ–≤!")
            return []
        table = match.group(0)
        lines = [l for l in table.splitlines() if l.strip().startswith('|') and not l.strip().startswith('|:')]
        spheres = []
        for line in lines[1:]:
            parts = [p.strip() for p in line.strip('|').split('|')]
            if len(parts) >= 3:
                spheres.append(parts[1])  # –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        return spheres 