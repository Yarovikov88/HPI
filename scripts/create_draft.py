import os
import sys
from datetime import datetime
import json
import re
from typing import Dict, List, Any
import logging

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
# __file__ -> scripts/create_draft.py
# os.path.dirname(...) -> scripts/
# os.path.dirname(...) -> hpi/
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DRAFT_FOLDER = os.path.join(PROJECT_ROOT, "reports_draft")
DB_PATH = os.path.join(PROJECT_ROOT, 'database', 'questions.md')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ñ–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π
SPHERES_CONFIG = [
    {"key": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏", "emoji": "üíñ"},
    {"key": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏", "emoji": "üè°"},
    {"key": "–î—Ä—É–∑—å—è", "emoji": "ü§ù"},
    {"key": "–ö–∞—Ä—å–µ—Ä–∞", "emoji": "üíº"},
    {"key": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "emoji": "‚ôÇÔ∏è"},
    {"key": "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "emoji": "üß†"},
    {"key": "–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è", "emoji": "üé®"},
    {"key": "–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ", "emoji": "üí∞"}
]

def parse_question_database() -> Dict[str, Dict[str, List[Any]]]:
    """
    –ü–∞—Ä—Å–∏—Ç questions.md –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫.
    """
    if not os.path.exists(DB_PATH):
        logging.error(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {DB_PATH}")
        sys.exit(1)

    with open(DB_PATH, 'r', encoding='utf-8') as f:
        content = f.read()

    all_data = {sphere['key']: {'basic': [], 'metrics': []} for sphere in SPHERES_CONFIG}
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç emoji –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∞ –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏—Ç—å –∏—Ö
    for sphere_config in SPHERES_CONFIG:
        sphere_key = sphere_config['key']
        sphere_emoji = sphere_config['emoji']
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ñ–µ—Ä—ã
        pattern = re.compile(rf"##\s*{re.escape(sphere_emoji)}\s*{re.escape(sphere_key)}\n```json\n([\s\S]+?)\n```", re.DOTALL)
        match = pattern.search(content)
        
        if not match:
            logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω JSON-–±–ª–æ–∫ –¥–ª—è —Å—Ñ–µ—Ä—ã '{sphere_key}'")
            continue
        
        try:
            items = json.loads(match.group(1))
            for item in items:
                if item.get("type") == "basic":
                    all_data[sphere_key]['basic'].append(item)
                elif item.get("category") == "metrics" and "metrics" in item:
                    all_data[sphere_key]['metrics'].extend(item["metrics"])
        except json.JSONDecodeError:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è —Å—Ñ–µ—Ä—ã '{sphere_key}'")
            continue
            
    return all_data

def generate_draft_content(db_data: Dict[str, Dict[str, List[Any]]]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î.
    """
    date_str = datetime.now().strftime('%Y-%m-%d')
    
    # --- –°–æ–±–∏—Ä–∞–µ–º HPI —Å–µ–∫—Ü–∏–∏ (–≤–æ–ø—Ä–æ—Å—ã 1-8) ---
    hpi_sections = []
    for i, sphere_config in enumerate(SPHERES_CONFIG, 1):
        sphere_key = sphere_config['key']
        sphere_emoji = sphere_config['emoji']
        sphere_title = f"## {i}. {sphere_emoji} {sphere_key}"
        
        table_header = "| –í–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç—ã | –û—Ç–≤–µ—Ç |\n|:---|:---|:---:|"
        
        questions = db_data.get(sphere_key, {}).get('basic', [])
        
        table_rows = []
        for q in questions:
            options_list = q.get('options', [])
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É: "1. –í–∞—Ä–∏–∞–Ω—Ç; 2. –í–∞—Ä–∏–∞–Ω—Ç; ..."
            formatted_options = "; ".join([f"{i+1}. {opt}" for i, opt in enumerate(options_list)])
            table_rows.append(f"| {q.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')} | {formatted_options} | |")
        
        hpi_sections.append(f"{sphere_title}\n{table_header}\n" + "\n".join(table_rows))
        
    # --- –°–æ–±–∏—Ä–∞–µ–º PRO —Å–µ–∫—Ü–∏–∏ ---
    pro_sections_map = {
        '–ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã': 'üõë',
        '–ú–æ–∏ —Ü–µ–ª–∏': 'üéØ',
        '–ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã': 'üöß',
        '–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è': 'üèÜ'
    }
    pro_sections = []
    for title, emoji in pro_sections_map.items():
        section_title = f"### {emoji} {title}"
        table_header = "| –°—Ñ–µ—Ä–∞ –∂–∏–∑–Ω–∏ | –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã |\n|:---|:---|"
        table_rows = [f"| {s['emoji']} {s['key']} | |" for s in SPHERES_CONFIG]
        pro_sections.append(f"{section_title}\n{table_header}\n" + "\n".join(table_rows))

    # --- –°–æ–±–∏—Ä–∞–µ–º —Å–µ–∫—Ü–∏—é "–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏" ---
    metrics_header = "| –°—Ñ–µ—Ä–∞ –∂–∏–∑–Ω–∏ | –ú–µ—Ç—Ä–∏–∫–∞ | –¢–µ–∫—É—â–µ–µ | –¶–µ–ª–µ–≤–æ–µ |\n|:---|:---|:---:|:---:|"
    metrics_rows = []
    for sphere_config in SPHERES_CONFIG:
        sphere_key = sphere_config['key']
        sphere_emoji = sphere_config['emoji']
        metrics = db_data.get(sphere_key, {}).get('metrics', [])
        for metric in metrics:
            metrics_rows.append(f"| {sphere_emoji} {sphere_key} | {metric.get('name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')} | | |")
    metrics_section = f"### üìä –ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏\n{metrics_header}\n" + "\n".join(metrics_rows)
    
    # --- –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë –≤–º–µ—Å—Ç–µ ---
    final_content = f"""# HPI –û—Ç—á–µ—Ç

> [!NOTE]
> –î–∞—Ç–∞: {date_str}
> –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∏–∂–µ. –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Å—Ñ–µ—Ä–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∫–∞–ª—É –æ—Ç 1 –¥–æ 4.

---

{"\n\n".join(hpi_sections)}

---

# HPI PRO

{"\n\n".join(pro_sections)}

{metrics_section}
"""
    return final_content.strip()

def create_draft_report():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —á–µ—Ä–Ω–æ–≤–∏–∫–∞ HPI –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ questions.md.
    """
    os.makedirs(DRAFT_FOLDER, exist_ok=True)

    today_str = datetime.now().strftime("%Y-%m-%d")
    draft_filename = f"{today_str}_draft.md"
    draft_filepath = os.path.join(DRAFT_FOLDER, draft_filename)

    if os.path.exists(draft_filepath):
        logging.warning(f"–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({draft_filename}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    try:
        logging.info("–ü–∞—Ä—Å–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
        db_data = parse_question_database()
        logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞...")
        draft_content = generate_draft_content(db_data)
        
        with open(draft_filepath, 'w', encoding='utf-8') as f:
            f.write(draft_content)
            
        logging.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–Ω–æ–≤–∏–∫: {draft_filepath}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")

if __name__ == "__main__":
    create_draft_report() 