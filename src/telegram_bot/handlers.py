"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram-–±–æ—Ç–∞ HPI
"""
import logging
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler
from telegram.constants import ParseMode

from .states import UserState, SessionManager
from .questions import QuestionsManager
from .calculator import HPICalculator
from .visualizer import HPIVisualizer


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_ACTION, ANSWERING_QUESTIONS, COLLECTING_PRO = range(3)

logger = logging.getLogger(__name__)


class HPIBotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞ HPI."""
    
    def __init__(self):
        self.session_manager = SessionManager()
        self.questions_manager = QuestionsManager()
        self.calculator = HPICalculator()
        self.visualizer = HPIVisualizer()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        user_id = update.effective_user.id if update.effective_user else None
        if user_id is None:
            return CHOOSING_ACTION
        session = self.session_manager.get_session(user_id)
        session.reset()
        if update.message and hasattr(update.message, 'date'):
            session.last_activity = update.message.date
        
        welcome_text = (
            "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HPI Bot!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
            "üìä <b>–ß—Ç–æ –º—ã –±—É–¥–µ–º –æ—Ü–µ–Ω–∏–≤–∞—Ç—å:</b>\n"
            "üíñ –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏\n"
            "üè° –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏\n"
            "ü§ù –î—Ä—É–∑—å—è\n"
            "üíº –ö–∞—Ä—å–µ—Ä–∞\n"
            "‚ôÇÔ∏è –§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ\n"
            "üß† –ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ\n"
            "üé® –•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è\n"
            "üí∞ –ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑?"
        )
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="start_survey")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(
                welcome_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
        else:
            logger.warning("update.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        
        return CHOOSING_ACTION
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        help_text = (
            "üìö <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç HPI Bot:</b>\n\n"
            "1Ô∏è‚É£ <b>–û–ø—Ä–æ—Å</b> - –æ—Ç–≤–µ—Ç–∏—Ç–µ –Ω–∞ 48 –≤–æ–ø—Ä–æ—Å–æ–≤ (6 –ø–æ –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä–µ)\n"
            "2Ô∏è‚É£ <b>–†–∞—Å—á–µ—Ç</b> - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –≤–∞—à Human Performance Index\n"
            "3Ô∏è‚É£ <b>–ê–Ω–∞–ª–∏–∑</b> - –ø–æ–ª—É—á–∏—Ç–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "‚è±Ô∏è <b>–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</b> 10-15 –º–∏–Ω—É—Ç\n"
            "üíæ <b>–î–∞–Ω–Ω—ã–µ:</b> —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤\n\n"
            "üéØ <b>–¶–µ–ª—å:</b> –ø–æ–º–æ—á—å –≤–∞–º —É–≤–∏–¥–µ—Ç—å –±–∞–ª–∞–Ω—Å –∂–∏–∑–Ω–∏ –∏ –Ω–∞–π—Ç–∏ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"
        )
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="start_survey")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(
                help_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
        else:
            logger.warning("update.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å help_text –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        
        return CHOOSING_ACTION
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        if not query or not query.from_user:
            return CHOOSING_ACTION
        await query.answer()
        user_id = query.from_user.id
        session = self.session_manager.get_session(user_id)
        if query.message and hasattr(query.message, 'date'):
            session.last_activity = query.message.date
        
        data = query.data
        if not data:
            return CHOOSING_ACTION
        if data == "start_survey":
            return await self._start_survey(query, session)
        elif data == "help":
            return await self._show_help(query)
        elif data == "back_to_start":
            return await self._back_to_start(query)
        elif data.startswith("answer_"):
            return await self._handle_answer(query, session)
        elif data == "skip_pro":
            return await self._finish_survey(query, session)
        elif data == "restart":
            return await self._restart_survey(query, session)
        
        return CHOOSING_ACTION
    
    async def _start_survey(self, query, session) -> int:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å."""
        session.state = UserState.ANSWERING_QUESTIONS
        session.current_sphere = 1
        session.current_question = 0
        session.survey_start_time = query.message.date
        
        sphere = self.questions_manager.get_sphere(1)
        if not sphere:
            await query.edit_message_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return CHOOSING_ACTION
            
        question = sphere.questions[0]
        
        question_text = self.questions_manager.format_question_for_telegram(sphere, question)
        progress_text = f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> 1/48 –≤–æ–ø—Ä–æ—Å–æ–≤"
        
        keyboard = self._create_answer_keyboard(question)
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"{question_text}\n\n{progress_text}",
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
        
        return ANSWERING_QUESTIONS
    
    async def _show_help(self, query) -> int:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É."""
        help_text = (
            "üìö <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç HPI Bot:</b>\n\n"
            "1Ô∏è‚É£ <b>–û–ø—Ä–æ—Å</b> - –æ—Ç–≤–µ—Ç–∏—Ç–µ –Ω–∞ 48 –≤–æ–ø—Ä–æ—Å–æ–≤ (6 –ø–æ –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä–µ)\n"
            "2Ô∏è‚É£ <b>–†–∞—Å—á–µ—Ç</b> - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –≤–∞—à Human Performance Index\n"
            "3Ô∏è‚É£ <b>–ê–Ω–∞–ª–∏–∑</b> - –ø–æ–ª—É—á–∏—Ç–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "‚è±Ô∏è <b>–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</b> 10-15 –º–∏–Ω—É—Ç\n"
            "üíæ <b>–î–∞–Ω–Ω—ã–µ:</b> —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤\n\n"
            "üéØ <b>–¶–µ–ª—å:</b> –ø–æ–º–æ—á—å –≤–∞–º —É–≤–∏–¥–µ—Ç—å –±–∞–ª–∞–Ω—Å –∂–∏–∑–Ω–∏ –∏ –Ω–∞–π—Ç–∏ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"
        )
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="start_survey")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            help_text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
        
        return CHOOSING_ACTION
    
    async def _back_to_start(self, query) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –Ω–∞—á–∞–ª—É."""
        welcome_text = (
            "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HPI Bot!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
            "üìä <b>–ß—Ç–æ –º—ã –±—É–¥–µ–º –æ—Ü–µ–Ω–∏–≤–∞—Ç—å:</b>\n"
            "üíñ –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏\n"
            "üè° –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏\n"
            "ü§ù –î—Ä—É–∑—å—è\n"
            "üíº –ö–∞—Ä—å–µ—Ä–∞\n"
            "‚ôÇÔ∏è –§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ\n"
            "üß† –ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ\n"
            "üé® –•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è\n"
            "üí∞ –ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑?"
        )
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="start_survey")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            welcome_text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
        
        return CHOOSING_ACTION
    
    async def _handle_answer(self, query, session) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
        answer_data = query.data.split("_")
        answer = int(answer_data[1])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        sphere_key = str(session.current_sphere)
        if sphere_key not in session.answers:
            session.answers[sphere_key] = []
        session.answers[sphere_key].append(answer)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        session.current_question += 1
        sphere = self.questions_manager.get_sphere(session.current_sphere)
        
        if not sphere:
            await query.edit_message_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return CHOOSING_ACTION
        
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å—Ñ–µ—Ä–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ñ–µ—Ä–µ
        if session.current_question >= len(sphere.questions):
            session.current_sphere += 1
            session.current_question = 0
            
            # –ï—Å–ª–∏ –≤—Å–µ —Å—Ñ–µ—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
            if session.current_sphere > 8:
                return await self._finish_survey(query, session)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        sphere = self.questions_manager.get_sphere(session.current_sphere)
        if not sphere:
            await query.edit_message_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return CHOOSING_ACTION
            
        question = sphere.questions[session.current_question]
        
        question_text = self.questions_manager.format_question_for_telegram(sphere, question)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        total_answered = sum(len(answers) for answers in session.answers.values())
        progress_text = f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {total_answered}/48 –≤–æ–ø—Ä–æ—Å–æ–≤"
        
        keyboard = self._create_answer_keyboard(question)
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"{question_text}\n\n{progress_text}",
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
        
        return ANSWERING_QUESTIONS
    
    async def _finish_survey(self, query, session) -> int:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
        # –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –¢–ê–ë–õ–ò–¶
        session.problems = [
            {"emoji": "‚ù§Ô∏è", "text": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–¥–≤–æ—ë–º."},
            {"emoji": "üè°", "text": "–†–µ–¥–∫–æ –≤–∏–¥–∏–º—Å—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ –∏–∑-–∑–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è."}
        ]
        session.goals = [
            {"emoji": "‚ù§Ô∏è", "text": "–ü—Ä–æ–≤–æ–¥–∏—Ç—å –æ–¥–∏–Ω –≤–µ—á–µ—Ä –≤ –Ω–µ–¥–µ–ª—é —Ç–æ–ª—å–∫–æ –≤–¥–≤–æ—ë–º, –±–µ–∑ –≥–∞–¥–∂–µ—Ç–æ–≤."},
            {"emoji": "üè°", "text": "–ó–≤–æ–Ω–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é."}
        ]
        session.blockers = [
            {"emoji": "‚ù§Ô∏è", "text": "–£—Å—Ç–∞–ª–æ—Å—Ç—å –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã."},
            {"emoji": "üè°", "text": "–†–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö."}
        ]
        session.metrics = [
            {"emoji": "‚ù§Ô∏è", "name": "–ß–∞—Å—ã –≤–º–µ—Å—Ç–µ", "value": 5, "goal": 8, "delta": "-3"},
            {"emoji": "üè°", "name": "–í—Å—Ç—Ä–µ—á–∏ –≤ –º–µ—Å—è—Ü", "value": 1, "goal": 2, "delta": "-1"}
        ]
        session.recommendations = [
            {"emoji": "‚ù§Ô∏è", "text": "Quality Time Together"},
            {"emoji": "üè°", "text": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏"}
        ]
        session.ai_recommendations = [
            {"emoji": "‚ù§Ô∏è", "title": "Quality Time Together", "desc": "–ü—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –±–µ–∑ –≥–∞–¥–∂–µ—Ç–æ–≤", "steps": "1. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–µ—á–µ—Ä –±–µ–∑ –≥–∞–¥–∂–µ—Ç–æ–≤"}
        ]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º HPI
        scores = self.calculator.calculate_scores(session.answers)
        hpi_total = self.calculator.calculate_total_hpi(scores)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–º–µ—Ä: session.prev_scores)
        prev_scores = getattr(session, 'prev_scores', None)

        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        if prev_scores:
            radar_image = self.visualizer.create_radar_chart_compare(prev_scores, scores)
        else:
            radar_image = self.visualizer.create_radar_chart(scores)
        trend_image = self.visualizer.create_trend_chart(scores, hpi_total)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        results_text = self._format_hpi_block(scores, hpi_total)
        pro_text = self._format_hpi_pro_block(session)
        ai_text = self._format_ai_block(session)
        full_text = f"{results_text}\n---\n{pro_text}\n---\n{ai_text}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await query.edit_message_text(
            full_text,
            parse_mode=ParseMode.HTML
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
        if radar_image:
            await query.message.reply_photo(
                photo=radar_image,
                caption="üìä <b>–ë–∞–ª–∞–Ω—Å –ø–æ —Å—Ñ–µ—Ä–∞–º –∂–∏–∑–Ω–∏ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ –∏ —Ç–µ–∫—É—â–µ–≥–æ)</b>",
                parse_mode=ParseMode.HTML
            )

        if trend_image:
            await query.message.reply_photo(
                photo=trend_image,
                caption="üìà <b>–î–∏–Ω–∞–º–∏–∫–∞ HPI</b>",
                parse_mode=ParseMode.HTML
            )

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?",
            reply_markup=reply_markup
        )

        return CHOOSING_ACTION

    def _format_hpi_block(self, scores: Dict[str, float], hpi_total: float) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ HPI: –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–µ–∫—É—â–∏–π HPI, –¥–∏–Ω–∞–º–∏–∫–∞, –±–∞–ª–∞–Ω—Å —Å—Ñ–µ—Ä."""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        return (
            "<b>HPI</b>\n"
            f"–¢–µ–∫—É—â–∏–π HPI: <b>{hpi_total:.1f}</b>\n"
            f"–î–∏–Ω–∞–º–∏–∫–∞: ...\n"
            f"–ë–∞–ª–∞–Ω—Å —Å—Ñ–µ—Ä: —Å–º. —Ä–∞–¥–∞—Ä –Ω–∏–∂–µ"
        )

    def format_problems(self, problems):
        if not problems:
            return "<b>–ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã:</b> ‚Äî"
        rows = ["–°—Ñ–µ—Ä–∞ | –ü—Ä–æ–±–ª–µ–º–∞"]
        for p in problems:
            rows.append(f"{p['emoji']} | {p['text']}")
        return "<b>–ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n<pre>" + "\n".join(rows) + "</pre>"

    def format_goals(self, goals):
        if not goals:
            return "<b>–ú–æ–∏ —Ü–µ–ª–∏:</b> ‚Äî"
        rows = ["–°—Ñ–µ—Ä–∞ | –¶–µ–ª—å"]
        for g in goals:
            rows.append(f"{g['emoji']} | {g['text']}")
        return "<b>–ú–æ–∏ —Ü–µ–ª–∏:</b>\n<pre>" + "\n".join(rows) + "</pre>"

    def format_blockers(self, blockers):
        if not blockers:
            return "<b>–ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã:</b> ‚Äî"
        rows = ["–°—Ñ–µ—Ä–∞ | –ë–ª–æ–∫–µ—Ä"]
        for b in blockers:
            rows.append(f"{b['emoji']} | {b['text']}")
        return "<b>–ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã:</b>\n<pre>" + "\n".join(rows) + "</pre>"

    def format_metrics(self, metrics):
        if not metrics:
            return "<b>–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏:</b> ‚Äî"
        rows = ["–°—Ñ–µ—Ä–∞ | –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ | –¶–µ–ª—å | –ò–∑–º."]
        for m in metrics:
            rows.append(f"{m['emoji']} | {m['name']} | {m['value']} | {m['goal']} | {m['delta']}")
        return "<b>–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏:</b>\n<pre>" + "\n".join(rows) + "</pre>"

    def format_recommendations(self, recs):
        if not recs:
            return "<b>–ú–æ–∏ –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> ‚Äî"
        rows = ["–°—Ñ–µ—Ä–∞ | –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"]
        for r in recs:
            rows.append(f"{r['emoji']} | {r['text']}")
        return "<b>–ú–æ–∏ –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n<pre>" + "\n".join(rows) + "</pre>"

    def format_ai_recommendations(self, ai):
        if not ai:
            return "<b>AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> ‚Äî"
        rows = ["–°—Ñ–µ—Ä–∞ | AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è | –û–ø–∏—Å–∞–Ω–∏–µ | –®–∞–≥–∏"]
        for a in ai:
            rows.append(f"{a['emoji']} | {a['title']} | {a['desc']} | {a['steps']}")
        return "<b>AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n<pre>" + "\n".join(rows) + "</pre>"

    def _format_hpi_pro_block(self, session) -> str:
        return (
            "<b>HPI pro</b>\n"
            + self.format_problems(getattr(session, 'problems', [])) + "\n"
            + self.format_goals(getattr(session, 'goals', [])) + "\n"
            + self.format_blockers(getattr(session, 'blockers', [])) + "\n"
            + self.format_metrics(getattr(session, 'metrics', [])) + "\n"
            + self.format_recommendations(getattr(session, 'recommendations', []))
        )

    def _format_ai_block(self, session) -> str:
        return self.format_ai_recommendations(getattr(session, 'ai_recommendations', []))
    
    async def _restart_survey(self, query, session) -> int:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å."""
        session.reset()
        return await self._start_survey(query, session)
    
    def _create_answer_keyboard(self, question) -> list:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤."""
        keyboard = []
        for i, option in enumerate(question.options, 1):
            keyboard.append([InlineKeyboardButton(f"{i}. {option}", callback_data=f"answer_{i}")])
        return keyboard


def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    handlers = HPIBotHandlers()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", handlers.start_command),
            CommandHandler("help", handlers.help_command)
        ],
        states={
            CHOOSING_ACTION: [
                CallbackQueryHandler(handlers.button_handler)
            ],
            ANSWERING_QUESTIONS: [
                CallbackQueryHandler(handlers.button_handler)
            ],
            COLLECTING_PRO: [
                CallbackQueryHandler(handlers.button_handler)
            ]
        },
        fallbacks=[
            CommandHandler("start", handlers.start_command)
        ]
    )
    
    application.add_handler(conv_handler) 