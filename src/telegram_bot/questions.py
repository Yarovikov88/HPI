"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –≤ Telegram-–±–æ—Ç–µ HPI
"""
import json
import os
from typing import Dict, List, Optional
from dataclasses import dataclass


@dataclass
class Question:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    id: str
    text: str
    options: List[str]
    scores: List[int]
    inverse: bool = False


@dataclass
class Sphere:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏."""
    number: int
    name: str
    emoji: str
    questions: List[Question]


class QuestionsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–æ—Ç–∞."""
    
    def __init__(self, database_path: Optional[str] = None):
        if database_path is None:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            current_dir = os.path.dirname(os.path.abspath(__file__))
            project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
            database_path = os.path.join(project_root, 'database', 'questions.md')
        
        self.database_path = database_path
        self.spheres = self._load_spheres()
    
    def _load_spheres(self) -> List[Sphere]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ñ–µ—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        spheres_config = [
            {"number": 1, "name": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏", "emoji": "üíñ"},
            {"number": 2, "name": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏", "emoji": "üè°"},
            {"number": 3, "name": "–î—Ä—É–∑—å—è", "emoji": "ü§ù"},
            {"number": 4, "name": "–ö–∞—Ä—å–µ—Ä–∞", "emoji": "üíº"},
            {"number": 5, "name": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "emoji": "‚ôÇÔ∏è"},
            {"number": 6, "name": "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "emoji": "üß†"},
            {"number": 7, "name": "–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è", "emoji": "üé®"},
            {"number": 8, "name": "–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ", "emoji": "üí∞"}
        ]
        
        spheres = []
        
        try:
            with open(self.database_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            for config in spheres_config:
                sphere_questions = self._parse_sphere_questions(content, config)
                sphere = Sphere(
                    number=config["number"],
                    name=config["name"],
                    emoji=config["emoji"],
                    questions=sphere_questions
                )
                spheres.append(sphere)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            spheres = self._get_fallback_spheres()
        
        return spheres
    
    def _parse_sphere_questions(self, content: str, sphere_config: Dict) -> List[Question]:
        """–ü–∞—Ä—Å–∏—Ç –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ñ–µ—Ä—ã."""
        import re
        
        questions = []
        emoji = sphere_config["emoji"]
        name = sphere_config["name"]
        
        # –ò—â–µ–º JSON-–±–ª–æ–∫ –¥–ª—è —Å—Ñ–µ—Ä—ã
        pattern = rf"##\s*{re.escape(emoji)}\s*{re.escape(name)}\n```json\n([\s\S]+?)\n```"
        match = re.search(pattern, content, re.DOTALL)
        
        if match:
            try:
                json_data = json.loads(match.group(1))
                for item in json_data:
                    if item.get("type") == "basic" and "id" in item:
                        question = Question(
                            id=item["id"],
                            text=item["text"],
                            options=item["options"],
                            scores=item.get("scores", [1, 2, 3, 4]),
                            inverse=item.get("inverse", False)
                        )
                        questions.append(question)
            except json.JSONDecodeError:
                pass
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 6 –≤–æ–ø—Ä–æ—Å–æ–≤
        return questions[:6]
    
    def _get_fallback_spheres(self) -> List[Sphere]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
        fallback_questions = [
            Question(
                id="1.1",
                text="–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ?",
                options=["–†–µ–¥–∫–æ –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–†–µ–≥—É–ª—è—Ä–Ω–æ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ"],
                scores=[1, 2, 3, 4]
            ),
            Question(
                id="1.2", 
                text="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π",
                options=["–£ –Ω–∞—Å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —Ä–∞–∑–Ω—ã–µ –ø–ª–∞–Ω—ã", "–ï—Å—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ", "–í –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–≤–ø–∞–¥–∞—é—Ç", "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"],
                scores=[1, 2, 3, 4]
            ),
            Question(
                id="1.3",
                text="–†–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤", 
                options=["–ß–∞—Å—Ç—ã–µ —Å—Å–æ—Ä—ã –±–µ–∑ —Ä–µ—à–µ–Ω–∏—è", "–ò–Ω–æ–≥–¥–∞ —Å–ø–æ—Ä—ã, –Ω–æ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã", "–†–µ–¥–∫–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ–º"],
                scores=[4, 3, 2, 1],
                inverse=True
            ),
            Question(
                id="1.4",
                text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –∫—Ä–∏–∑–∏—Å–∞—Ö",
                options=["–ü–∞—Ä—Ç–Ω—ë—Ä –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç", "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å", "–ê–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç", "–ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞"],
                scores=[1, 2, 3, 4]
            ),
            Question(
                id="1.5",
                text="–ü—Ä–æ—è–≤–ª–µ–Ω–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –∑–∞–±–æ—Ç—ã",
                options=["–†–µ–¥–∫–æ –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ"],
                scores=[1, 2, 3, 4]
            ),
            Question(
                id="1.6",
                text="–û—â—É—â–µ–Ω–∏–µ –ª—é–±–≤–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è",
                options=["–°–æ–≤—Å–µ–º –Ω–µ—Ç / –í —Å–ª–∞–±–æ–π —Å—Ç–µ–ø–µ–Ω–∏", "–í –Ω–µ–∫–æ—Ç–æ—Ä–æ–π —Å—Ç–µ–ø–µ–Ω–∏", "–í –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏", "–ê–±—Å–æ–ª—é—Ç–Ω–æ / –ü–æ–ª–Ω–æ—Å—Ç—å—é"],
                scores=[1, 2, 3, 4]
            )
        ]
        
        spheres_config = [
            {"number": 1, "name": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏", "emoji": "üíñ"},
            {"number": 2, "name": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏", "emoji": "üè°"},
            {"number": 3, "name": "–î—Ä—É–∑—å—è", "emoji": "ü§ù"},
            {"number": 4, "name": "–ö–∞—Ä—å–µ—Ä–∞", "emoji": "üíº"},
            {"number": 5, "name": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "emoji": "‚ôÇÔ∏è"},
            {"number": 6, "name": "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "emoji": "üß†"},
            {"number": 7, "name": "–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è", "emoji": "üé®"},
            {"number": 8, "name": "–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ", "emoji": "üí∞"}
        ]
        
        spheres = []
        for config in spheres_config:
            sphere = Sphere(
                number=config["number"],
                name=config["name"],
                emoji=config["emoji"],
                questions=fallback_questions.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
            )
            spheres.append(sphere)
        
        return spheres
    
    def get_sphere(self, sphere_number: int) -> Optional[Sphere]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ñ–µ—Ä—É –ø–æ –Ω–æ–º–µ—Ä—É."""
        for sphere in self.spheres:
            if sphere.number == sphere_number:
                return sphere
        return None
    
    def get_question(self, sphere_number: int, question_index: int) -> Optional[Question]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ñ–µ—Ä—ã –∏ –∏–Ω–¥–µ–∫—Å—É –≤–æ–ø—Ä–æ—Å–∞."""
        sphere = self.get_sphere(sphere_number)
        if sphere and 0 <= question_index < len(sphere.questions):
            return sphere.questions[question_index]
        return None
    
    def get_total_questions(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤."""
        return sum(len(sphere.questions) for sphere in self.spheres)
    
    def format_question_for_telegram(self, sphere: Sphere, question: Question) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram."""
        text = f"{sphere.emoji} <b>{sphere.name}</b>\n\n"
        text += f"<b>–í–æ–ø—Ä–æ—Å {question.id}:</b>\n{question.text}\n\n"
        text += "<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:</b>\n"
        
        for i, option in enumerate(question.options, 1):
            text += f"{i}. {option}\n"
        
        return text 