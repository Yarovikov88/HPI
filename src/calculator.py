"""
HPI Calculator
Version: 0.3
Release Date: 2024-03-20
Status: Development

–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —Ä–∞—Å—á–µ—Ç–∞ Human Performance Index (HPI).
"""

import os
import re
import shutil
from typing import Dict, List, Optional, Tuple
from radar import create_radar_chart
from datetime import datetime
import sys
import traceback

# Constants
MIN_ANSWER = 1
MAX_ANSWER = 4
QUESTIONS_PER_SPHERE = 6

# --- –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (–ø–∞–ø–∫–∞ 'HPI v.0.3')
# __file__ -> src/calculator.py
# os.path.dirname(__file__) -> src/
# os.path.dirname(...) -> –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# –ü–∞–ø–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
DRAFT_FOLDER = os.path.join(PROJECT_ROOT, "reports_draft")
FINAL_FOLDER = os.path.join(PROJECT_ROOT, "reports_final")
INTERFACES_FOLDER = os.path.join(PROJECT_ROOT, "interfaces")

# –ù–µ–ª–∏–Ω–µ–π–Ω–∞—è —à–∫–∞–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
FIBONACCI_SCORES = {
    1: 1.0,  # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
    2: 2.0,  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    3: 3.0,  # –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å
    4: 5.0   # –û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
}

# Sphere weights (—Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ñ–µ—Ä)
SPHERE_WEIGHTS = {
    "1": 0.125,  # –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏
    "2": 0.125,  # –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏
    "3": 0.125,  # –î—Ä—É–∑—å—è
    "4": 0.125,  # –ö–∞—Ä—å–µ—Ä–∞
    "5": 0.125,  # –§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    "6": 0.125,  # –ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    "7": 0.125,  # –•–æ–±–±–∏
    "8": 0.125   # –ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ
}

# Sphere configuration
SPHERE_CONFIG = [
    {"number": "1", "name": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏", "emoji": "üíñ"},
    {"number": "2", "name": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏", "emoji": "üè°"},
    {"number": "3", "name": "–î—Ä—É–∑—å—è", "emoji": "ü§ù"},
    {"number": "4", "name": "–ö–∞—Ä—å–µ—Ä–∞", "emoji": "üíº"},
    {"number": "5", "name": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "emoji": "‚ôÇÔ∏è"},
    {"number": "6", "name": "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "emoji": "üß†"},
    {"number": "7", "name": "–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è", "emoji": "üé®"},
    {"number": "8", "name": "–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ", "emoji": "üí∞"}
]

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∏–∑ emoji –≤ –∏–º—è —Å—Ñ–µ—Ä—ã
EMOJI_TO_SPHERE_NAME = {s['emoji'].strip(): s['name'] for s in SPHERE_CONFIG}

# –°–∏–Ω–æ–Ω–∏–º—ã —Å—Ñ–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫
SPHERE_SYNONYMS = {
    "–•–æ–±–±–∏": "–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è",
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

def apply_fibonacci_score(answer: int, inverse: bool = False) -> float:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –§–∏–±–æ–Ω–∞—á—á–∏ –∫ –æ—Ç–≤–µ—Ç—É."""
    if inverse:
        answer = MAX_ANSWER - answer + 1
    return FIBONACCI_SCORES[answer]

def normalize_sphere_score(raw_score: float) -> float:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Å—Ñ–µ—Ä—ã –≤ —à–∫–∞–ª—É 1-10."""
    min_possible = QUESTIONS_PER_SPHERE * FIBONACCI_SCORES[MIN_ANSWER]  # 6 * 1.0 = 6.0
    max_possible = QUESTIONS_PER_SPHERE * FIBONACCI_SCORES[MAX_ANSWER]  # 6 * 5.0 = 30.0
    
    normalized = ((raw_score - min_possible) / (max_possible - min_possible)) * 9 + 1
    return round(max(1.0, min(10.0, normalized)), 1)

def calculate_sphere_score(answers: List[int], inverse_questions: List[bool] = None) -> Tuple[float, float]:
    """–†–∞—Å—á–µ—Ç —Å—ã—Ä–æ–≥–æ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –¥–ª—è —Å—Ñ–µ—Ä—ã."""
    if len(answers) != QUESTIONS_PER_SPHERE:
        raise ValueError(f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ {QUESTIONS_PER_SPHERE} –æ—Ç–≤–µ—Ç–æ–≤")
    
    if not all(MIN_ANSWER <= a <= MAX_ANSWER for a in answers):
        raise ValueError(f"–í—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ –æ—Ç {MIN_ANSWER} –¥–æ {MAX_ANSWER}")
    
    if inverse_questions is None:
        inverse_questions = [False] * QUESTIONS_PER_SPHERE
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∫–∞–ª—É –§–∏–±–æ–Ω–∞—á—á–∏ –∫ –∫–∞–∂–¥–æ–º—É –æ—Ç–≤–µ—Ç—É
    raw_score = sum(apply_fibonacci_score(a, inv) for a, inv in zip(answers, inverse_questions))
    normalized_score = normalize_sphere_score(raw_score)
    
    return raw_score, normalized_score

def calculate_total_hpi(sphere_scores: Dict[str, float]) -> float:
    """–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ HPI —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤ —Å—Ñ–µ—Ä."""
    total_weighted_score = 0
    total_weight = 0

    for sphere, score in sphere_scores.items():
        weight = SPHERE_WEIGHTS.get(sphere)
        if weight is not None and isinstance(score, (int, float)):
            total_weighted_score += score * weight
            total_weight += weight

    if total_weight == 0:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–µ—Å–∞ –¥–ª—è —Å—Ñ–µ—Ä")

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ (1-10) –≤ —à–∫–∞–ª—É 20-100
    hpi_score = ((total_weighted_score / total_weight - 1) * (80/9)) + 20
    return round(max(20.0, min(100.0, hpi_score)), 1)

def extract_answers_from_section(content: str, section_name: str) -> Optional[List[int]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –∏–∑ —Å–µ–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞."""
    try:
        # –£–±–∏—Ä–∞–µ–º ### –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏
        clean_section_name = section_name.replace("### ", "")
        
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é (–æ–¥–∏–Ω # –≤–º–µ—Å—Ç–æ –¥–≤—É—Ö)
        section_pattern = f"## {clean_section_name}.*?\\n\\n(.*?)(?=\\n##|$)"
        print(f"–ò—â–µ–º –ø–æ —à–∞–±–ª–æ–Ω—É: {section_pattern}")
        section_match = re.search(section_pattern, content, re.DOTALL)
        
        if not section_match:
            print(f"–°–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {clean_section_name}")
            return None
            
        section_content = section_match.group(1)
        print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏: {section_content[:100]}...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        answers = []
        for line in section_content.split('\n'):
            if '|' in line and not line.startswith('|--') and not line.startswith('| –í–æ–ø—Ä–æ—Å'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
                cells = [cell.strip() for cell in line.split('|') if cell.strip()]
                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏: {cells}")
                if len(cells) >= 3:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —è—á–µ–π–∫–∏: –≤–æ–ø—Ä–æ—Å, –≤–∞—Ä–∏–∞–Ω—Ç—ã, –æ—Ç–≤–µ—Ç
                    answer = cells[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —è—á–µ–π–∫–∞ - –æ—Ç–≤–µ—Ç
                    if answer.isdigit():
                        answers.append(int(answer))
        
        print(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã: {answers}")
        return answers if answers else None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ {section_name}: {str(e)}")
        return None

def process_hpi_report(file_path: str) -> Dict[str, float]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞ –∏ —Ä–∞—Å—á–µ—Ç –≤—Å–µ—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        raise IOError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

    sphere_scores = {}
    all_data_valid = True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
    for sphere in SPHERE_CONFIG:
        try:
            # –ò—â–µ–º —Å–µ–∫—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ "## 1. –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏"
            section_name = f"{sphere['number']}. {sphere['name']}"
            answers = extract_answers_from_section(content, section_name)
            
            if answers and len(answers) == QUESTIONS_PER_SPHERE:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
                inverse_questions = [False] * QUESTIONS_PER_SPHERE
                if sphere["number"] in ["4", "6", "8"]:  # –°—Ñ–µ—Ä—ã —Å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
                    inverse_questions[-1] = True  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
                
                _, normalized_score = calculate_sphere_score(answers, inverse_questions)
                sphere_scores[sphere["number"]] = normalized_score
            else:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í —Å—Ñ–µ—Ä–µ '{section_name}' –Ω–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                sphere_scores[sphere["number"]] = 0.0
                all_data_valid = False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —Å—Ñ–µ—Ä—ã {section_name}: {e}")
            sphere_scores[sphere["number"]] = 0.0
            all_data_valid = False

    # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ HPI
    try:
        hpi_total = calculate_total_hpi(sphere_scores)
        sphere_scores["HPI"] = hpi_total
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ HPI: {e}")
        sphere_scores["HPI"] = 0.0
        all_data_valid = False

    return sphere_scores

def get_score_emoji(score: float, is_hpi: bool = False) -> str:
    """Convert score to emoji indicator.
    
    Args:
        score: The score to convert
        is_hpi: Whether this is the overall HPI score (uses 20-100 scale) or sphere score (uses 1-10 scale)
    """
    if is_hpi:
        # –®–∫–∞–ª–∞ –¥–ª—è –æ–±—â–µ–≥–æ HPI (20-100)
        if score >= 80:
            return "üü¢"  # Excellent
        elif score >= 60:
            return "üîµ"  # Good
        elif score >= 40:
            return "üü°"  # Satisfactory
        else:
            return "üî¥"  # Needs attention
    else:
        # –®–∫–∞–ª–∞ –¥–ª—è —Å—Ñ–µ—Ä (1-10)
        if score >= 8.0:
            return "üü¢"  # Excellent
        elif score >= 6.0:
            return "üîµ"  # Good
        elif score >= 4.0:
            return "üü°"  # Satisfactory
        else:
            return "üî¥"  # Needs attention

def get_number_emoji(number: str) -> str:
    """Convert number to emoji digits."""
    # Format the number to ensure it has one decimal place
    try:
        formatted_number = f"{float(number):.1f}"
    except (ValueError, TypeError):
        return str(number)
    
    emoji_map = {
        "0": "0Ô∏è‚É£",
        "1": "1Ô∏è‚É£",
        "2": "2Ô∏è‚É£",
        "3": "3Ô∏è‚É£",
        "4": "4Ô∏è‚É£",
        "5": "5Ô∏è‚É£",
        "6": "6Ô∏è‚É£",
        "7": "7Ô∏è‚É£",
        "8": "8Ô∏è‚É£",
        "9": "9Ô∏è‚É£",
        ".": "."
    }
    return "".join(emoji_map.get(char, char) for char in formatted_number)

def find_latest_draft() -> Optional[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –ø–∞–ø–∫–µ DRAFT_FOLDER."""
    try:
        if not os.path.exists(DRAFT_FOLDER):
            print(f"–ü–∞–ø–∫–∞ —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DRAFT_FOLDER}")
            return None

        drafts = [os.path.join(DRAFT_FOLDER, f) for f in os.listdir(DRAFT_FOLDER) if f.startswith("HPI_Report_") and f.endswith(".md")]
        
        if not drafts:
            print("–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return None
            
        latest_draft = max(drafts, key=os.path.getmtime)
        return latest_draft
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
        return None

def create_final_report(draft_path: str, scores: Dict[str, float]) -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏ –æ—Ü–µ–Ω–æ–∫."""
    try:
        # –ü–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_folder = os.path.join(FINAL_FOLDER, "images")
        os.makedirs(images_folder, exist_ok=True)
            
        # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        date_str = os.path.basename(draft_path).split('_')[0]
        final_filename = f"{date_str}_final_report.md"
        final_report_path = os.path.join(FINAL_FOLDER, final_filename)
        
        # –ü—É—Ç—å –¥–ª—è —Ä–∞–¥–∞—Ä-–¥–∏–∞–≥—Ä–∞–º–º—ã –æ—Ç—á–µ—Ç–∞
        radar_report_path = os.path.join(images_folder, f"{date_str}_radar.png")
        create_radar_chart(scores, radar_report_path, is_dashboard=False)

        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        shutil.copy(draft_path, final_report_path)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –±–ª–æ–∫ —Å –∏—Ç–æ–≥–æ–≤—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º–æ–π
        with open(final_report_path, 'a', encoding='utf-8') as f:
            f.write("\n\n---\n\n")
            f.write("## üèÜ –ò—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ HPI\n\n")
            f.write(f"![–†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞](./images/{os.path.basename(radar_report_path)})\n\n")
            f.write("| –°—Ñ–µ—Ä–∞ | –û—Ü–µ–Ω–∫–∞ (1-10) | –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä |\n")
            f.write("|:---|:---:|:---:|\n")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ —Å—Ñ–µ—Ä–∞–º
            for sphere in SPHERE_CONFIG:
                score = scores.get(sphere['number'], 0.0)
                emoji = get_score_emoji(score)
                f.write(f"| {sphere['name']} | {score} | {emoji} |\n")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π HPI
            hpi_score = scores.get('HPI', 0.0)
            hpi_emoji = get_score_emoji(hpi_score, is_hpi=True)
            f.write(f"| **–ò—Ç–æ–≥–æ–≤—ã–π HPI** | **{hpi_score}** | {hpi_emoji} |\n")
        
        print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {final_report_path}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        traceback.print_exc()

def collect_all_reports_data() -> List[Tuple[str, float, Dict[str, float]]]:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–¥–∞—Ç–∞, HPI, {–æ—Ü–µ–Ω–∫–∏_—Å—Ñ–µ—Ä}).
    """
    all_data = []
    try:
        if not os.path.exists(FINAL_FOLDER):
            print("–ü–∞–ø–∫–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return []

        report_files = [f for f in os.listdir(FINAL_FOLDER) if f.startswith("HPI_Final_Report_") and f.endswith(".md")]
        
        for filename in report_files:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                date_str = filename.replace("HPI_Final_Report_", "").replace(".md", "")
                report_date = datetime.strptime(date_str, "%Y-%m-%d")
                
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –ø–∞—Ä—Å–∏–º –æ—Ü–µ–Ω–∫–∏
                filepath = os.path.join(FINAL_FOLDER, filename)
                with open(filepath, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                hpi_match = re.search(r"–ò—Ç–æ–≥–æ–≤—ã–π HPI\*\* \| \*\*([\d\.]+)\*\*", content)
                hpi_score = float(hpi_match.group(1)) if hpi_match else 0.0
                
                sphere_scores = {}
                for sphere in SPHERE_CONFIG:
                    # –ò—â–µ–º –æ—Ü–µ–Ω–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
                    pattern = rf"\| {re.escape(sphere['name'])} \| ([\d\.]+) \|"
                    match = re.search(pattern, content)
                    if match:
                        sphere_scores[sphere['name']] = float(match.group(1))
                
                all_data.append((report_date, hpi_score, sphere_scores))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–∞ {filename}: {e}")
                continue

    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
    all_data.sort(key=lambda x: x[0])
    return all_data

def update_dashboard(scores: Dict[str, float], draft_path: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç dashboard.md –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    try:
        dashboard_path = os.path.join(INTERFACES_FOLDER, "dashboard.md")
        images_folder = os.path.join(FINAL_FOLDER, "images")
        os.makedirs(images_folder, exist_ok=True)
        
        # –î–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Ä–∞–¥–∞—Ä –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ - –ø–æ—Å–ª–µ–¥–Ω–∏–π
        radar_dashboard_path = os.path.join(images_folder, "latest_radar.png")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        try:
            create_radar_chart(scores, radar_dashboard_path, is_dashboard=True)
            print(f"–†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {radar_dashboard_path}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        base_name = os.path.basename(draft_path)
        current_date = base_name[:10]  # –ë–µ—Ä–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        
        # –ß–∏—Ç–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        with open(draft_path, 'r', encoding='utf-8') as f:
            draft_content = f.read()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        answers = {}
        for sphere in SPHERE_CONFIG:
            section_name = f"{sphere['number']}. {sphere['name']}"  # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω–æ–π ##
            answers[sphere['number']] = extract_answers_from_section(draft_content, section_name)
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤
        all_reports_data = collect_all_reports_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏
        history_table = ""
        for date, hpi, _ in all_reports_data:
            emoji = get_score_emoji(hpi, is_hpi=True)
            history_table += f"| {date} | {hpi:.1f} | {emoji} |\n"

        # –ö–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ emoji –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        emojis = [s['emoji'] for s in SPHERE_CONFIG]
        detailed_table = "| –î–∞—Ç–∞ | " + " | ".join(emojis) + " |\n"
        detailed_table += "|------|" + "------|"*8 + "\n"
        for date, hpi, sphere_scores in all_reports_data:
            row = f"| {date} "
            for i in range(1, 9):
                val = sphere_scores.get(str(i), "-")
                if isinstance(val, float):
                    row += f"| {val:.1f} {get_score_emoji(val)} "
                else:
                    row += f"| {val} "
            row += "|\n"
            detailed_table += row

        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç HPI PRO: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ —Å—Ñ–µ—Ä–∞–º
        sub_map = [
            ('–ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã', 'üõë'),
            ('–ú–æ–∏ —Ü–µ–ª–∏', 'üéØ'),
            ('–ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã', 'üöß'),
            ('–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏', 'üìä'),
            ('–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'üèÜ')
        ]
        dashboard_content = f"""# HPI

> [!tip]- üìä –ú–æ–π HPI {scores["HPI"]:.1f} {get_score_emoji(scores["HPI"], is_hpi=True)}
> 
> ## –î–∏–Ω–∞–º–∏–∫–∞ HPI
> ![hpi trend](../reports_final/images/latest_trend.png)
> 
> ## –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π
> | –î–∞—Ç–∞ | HPI | –¢—Ä–µ–Ω–¥ |
> |------|-----|--------|
{history_table}

> [!tip]- ‚öñÔ∏è HPI –±–∞–ª–∞–Ω—Å
> 
> ![radar chart](../reports_final/images/latest_radar.png)
> 
> ## –ò—Å—Ç–æ—Ä–∏—è –ø–æ —Å—Ñ–µ—Ä–∞–º
{detailed_table}

# HPI PRO

"""
        for sub, emoji in sub_map:
            if sub == '–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏':
                # –î–ª—è –º–µ—Ç—Ä–∏–∫ ‚Äî —Ç–∞–±–ª–∏—Ü–∞ —Å 4 –∫–æ–ª–æ–Ω–∫–∞–º–∏, –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –ø–æ —Ü–µ–Ω—Ç—Ä—É
                dashboard_content += f"\n> [!info]- {emoji} {sub}\n>\n> | –°—Ñ–µ—Ä–∞ | –ú–µ—Ç—Ä–∏–∫–∞ | –¢–µ–∫—É—â–µ–µ | –¶–µ–ª–µ–≤–æ–µ |\n> |:------:|---------|---------|---------|\n"
                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: –∏—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –≤—Å—ë –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–æ–≥–æ –∂–µ –∏–ª–∏ –º–µ–Ω—å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è
                section_pat = rf"(#+\s*[0-9]+\. {sub}[\s\S]*?)(?=\n#|\Z)"
                section_match = re.search(section_pat, draft_content, re.DOTALL)
                if section_match:
                    section_text = section_match.group(1)
                    print("[DEBUG] –ù–∞–π–¥–µ–Ω–Ω—ã–π –±–ª–æ–∫ '–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏':\n", section_text[:300])
                else:
                    # Fallback: –∏—â–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ '–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏' –∏ –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –Ω–µ–≥–æ
                    idx = draft_content.find('–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏')
                    if idx != -1:
                        section_text = draft_content[idx:]
                        print("[DEBUG] Fallback-–±–ª–æ–∫ –ø–æ—Å–ª–µ '–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏':\n", section_text[:300])
                    else:
                        section_text = ''
                        print("[DEBUG] –°–µ–∫—Ü–∏—è '–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–æ–æ–±—â–µ!")
                # –ò—â–µ–º –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å 4+ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                table_lines = []
                found_table = False
                for line in section_text.split('\n'):
                    if line.strip().startswith('|') and line.count('|') >= 5:
                        table_lines.append(line)
                        found_table = True
                    elif found_table and (not line.strip().startswith('|') or line.strip() == ''):
                        break  # –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É
                    elif found_table:
                        table_lines.append(line)
                print("[DEBUG] –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫:", table_lines)
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ —Å—Ñ–µ—Ä–∞–º (—Å —É—á—ë—Ç–æ–º –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ)
                rows_by_sphere = {s['name']: [] for s in SPHERE_CONFIG}
                last_sphere = None
                for line in table_lines:
                    cells = [c.strip() for c in line.strip().split('|')[1:-1]]
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
                    if not cells or cells[0] in ('–°—Ñ–µ—Ä–∞ –∂–∏–∑–Ω–∏', '–ú–µ—Ç—Ä–∏–∫–∞', '–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', '–¢–µ–∫—É—â–µ–µ', '–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', '–¶–µ–ª–µ–≤–æ–µ') or all(set(cell) <= {'-'} for cell in cells) or len(cells) < 4:
                        continue
                    # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    sphere_identifier = cells[0]
                    if sphere_identifier:
                        last_sphere = sphere_identifier
                    elif last_sphere:
                        sphere_identifier = last_sphere
                    else:
                        continue  # –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ñ–µ—Ä—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                    # –ò—â–µ–º —Å—Ñ–µ—Ä—É –ø–æ –∏–º–µ–Ω–∏, —Å–∏–Ω–æ–Ω–∏–º—É –∏–ª–∏ emoji
                    sphere_key = EMOJI_TO_SPHERE_NAME.get(sphere_identifier, sphere_identifier)
                    sphere_key = SPHERE_SYNONYMS.get(sphere_key, sphere_key)

                    if sphere_key in rows_by_sphere:
                        rows_by_sphere[sphere_key].append(cells)

                for sphere in SPHERE_CONFIG:
                    rows = rows_by_sphere[sphere['name']]
                    if rows:
                        for cells in rows:
                            # –í –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ —Ç–æ–ª—å–∫–æ emoji, –ø–æ —Ü–µ–Ω—Ç—Ä—É
                            dashboard_content += f"> | {' ' + sphere['emoji'] + ' '} | {cells[1]} | {cells[2]} | {cells[3]} |\n"
                    else:
                        dashboard_content += f"> | {' ' + sphere['emoji'] + ' '} | –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö |  |  |\n"
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî —Ç–∞–±–ª–∏—Ü–∞ —Å 2 –∫–æ–ª–æ–Ω–∫–∞–º–∏, –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –ø–æ —Ü–µ–Ω—Ç—Ä—É
                dashboard_content += f"\n> [!info]- {emoji} {sub}\n>\n> | –°—Ñ–µ—Ä–∞ | –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã |\n> |:------:|-------------|\n"
                section_pat = rf"### [0-9]+\. {sub}([\s\S]*?)(?=###|##|#|\Z)"
                section_match = re.search(section_pat, draft_content, re.DOTALL)
                section_text = section_match.group(1) if section_match else ""
                table_lines = [line for line in section_text.split('\n') if line.strip().startswith('|')]
                answers = {}
                for line in table_lines:
                    cells = [c.strip() for c in line.strip().split('|')[1:-1]]
                    if len(cells) >= 2:
                        answers[cells[0]] = cells[1]
                for sphere in SPHERE_CONFIG:
                    key = sphere['name']
                    value = answers.get(key, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                    dashboard_content += f"> | {' ' + sphere['emoji'] + ' '} | {value} |\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
        with open(dashboard_path, 'w', encoding='utf-8') as f:
            f.write(dashboard_content)
            
        print(f"–î–∞—à–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω: {dashboard_path}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞
        try:
            import subprocess
            trend_script = os.path.join(os.path.dirname(__file__), "trend.py")
            subprocess.run([sys.executable, trend_script], check=True)
            print("–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞: {str(e)}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}")

def print_scores(scores):
    """–í—ã–≤–æ–¥–∏—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    print(f"HPI: {scores['HPI']:.1f} {get_score_emoji(scores['HPI'])}")
    for sphere in SPHERE_CONFIG:
        sphere_num = sphere["number"]
        print(f"{sphere['emoji']} {sphere['name']}: {scores[sphere_num]:.1f} {get_score_emoji(scores[sphere_num])}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞."""
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8 –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    if sys.stdout.encoding != 'utf-8':
        sys.stdout.reconfigure(encoding='utf-8')
        
    try:
        script_dir = os.path.dirname(os.path.abspath(__file__))
        version_dir = os.path.dirname(script_dir)
        log_path = os.path.join(version_dir, "HPI_log")

        with open(log_path, "a", encoding="utf-8") as log:
            log.write("\n" + "="*50 + "\n")
            log.write(f"[HPI_Calculator.py] –ó–∞–ø—É—Å–∫: {datetime.now()}\n\n")

            # –ù–æ–≤—ã–π –±–ª–æ–∫: –µ—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ ‚Äî –∏—â—É –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫
            if len(sys.argv) == 2:
                draft_path = sys.argv[1]
            else:
                log.write("–ê—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—â—É –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫...\n")
                draft_path = find_latest_draft()
                if not draft_path:
                    log.write("–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!\n")
                    print("–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
                    sys.exit(1)
                log.write(f"–ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫: {draft_path}\n")

            log.write(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞: {draft_path}\n")
            # –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            scores = process_hpi_report(draft_path)
            log.write("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:\n")
            for sphere in SPHERE_CONFIG:
                score = scores.get(sphere["number"], 0.0)
                log.write(f"{sphere['name']}: {score:.1f}\n")
            log.write(f"–ò—Ç–æ–≥–æ–≤—ã–π HPI: {scores['HPI']:.1f}\n")

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            log.write("\n–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...\n")
            create_final_report(draft_path, scores)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
            log.write("\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞...\n")
            update_dashboard(scores, draft_path)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞
            try:
                import subprocess
                trend_script = os.path.join(os.path.dirname(__file__), "trend.py")
                subprocess.run([sys.executable, trend_script], check=True)
                log.write("–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω\n")
            except Exception as e:
                log.write(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞: {str(e)}\n")

            log.write("\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n")

    except Exception as e:
        with open(log_path, "a", encoding="utf-8") as log:
            log.write(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–∞: {str(e)}\n")
            traceback.print_exc(file=log)
        sys.exit(1)

if __name__ == "__main__":
    main() 