"""
HPI Calculator
Version: 0.3
Release Date: 2024-03-20
Status: Development

–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —Ä–∞—Å—á–µ—Ç–∞ Human Performance Index (HPI).
"""

import os
import re
import shutil
from typing import Dict, List, Optional, Tuple
from src.radar import create_radar_chart
from datetime import datetime
import sys
import traceback

# Constants
MIN_ANSWER = 1
MAX_ANSWER = 4
QUESTIONS_PER_SPHERE = 6

# --- –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (–ø–∞–ø–∫–∞ 'HPI v.0.3')
# __file__ -> src/calculator.py
# os.path.dirname(__file__) -> src/
# os.path.dirname(...) -> –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# –ü–∞–ø–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
DRAFT_FOLDER = os.path.join(PROJECT_ROOT, "reports_draft")
FINAL_FOLDER = os.path.join(PROJECT_ROOT, "reports_final")
INTERFACES_FOLDER = os.path.join(PROJECT_ROOT, "interfaces")

# –ù–µ–ª–∏–Ω–µ–π–Ω–∞—è —à–∫–∞–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
FIBONACCI_SCORES = {
    1: 1.0,  # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
    2: 2.0,  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    3: 3.0,  # –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å
    4: 5.0   # –û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
}

# Sphere weights (—Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ñ–µ—Ä)
SPHERE_WEIGHTS = {
    "1": 0.125,  # –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏
    "2": 0.125,  # –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏
    "3": 0.125,  # –î—Ä—É–∑—å—è
    "4": 0.125,  # –ö–∞—Ä—å–µ—Ä–∞
    "5": 0.125,  # –§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    "6": 0.125,  # –ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    "7": 0.125,  # –•–æ–±–±–∏
    "8": 0.125   # –ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ
}

# Sphere configuration
SPHERE_CONFIG = [
    {"number": "1", "name": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏", "emoji": "üíñ"},
    {"number": "2", "name": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏", "emoji": "üè°"},
    {"number": "3", "name": "–î—Ä—É–∑—å—è", "emoji": "ü§ù"},
    {"number": "4", "name": "–ö–∞—Ä—å–µ—Ä–∞", "emoji": "üíº"},
    {"number": "5", "name": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "emoji": "‚ôÇÔ∏è"},
    {"number": "6", "name": "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "emoji": "üß†"},
    {"number": "7", "name": "–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è", "emoji": "üé®"},
    {"number": "8", "name": "–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ", "emoji": "üí∞"}
]

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∏–∑ emoji –≤ –∏–º—è —Å—Ñ–µ—Ä—ã
EMOJI_TO_SPHERE_NAME = {s['emoji'].strip(): s['name'] for s in SPHERE_CONFIG}

# –°–∏–Ω–æ–Ω–∏–º—ã —Å—Ñ–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫
SPHERE_SYNONYMS = {
    "–•–æ–±–±–∏": "–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è",
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

def apply_fibonacci_score(answer: int, inverse: bool = False) -> float:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –§–∏–±–æ–Ω–∞—á—á–∏ –∫ –æ—Ç–≤–µ—Ç—É."""
    if inverse:
        answer = MAX_ANSWER - answer + 1
    return FIBONACCI_SCORES[answer]

def normalize_sphere_score(raw_score: float) -> float:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Å—Ñ–µ—Ä—ã –≤ —à–∫–∞–ª—É 1-10."""
    min_possible = QUESTIONS_PER_SPHERE * FIBONACCI_SCORES[MIN_ANSWER]  # 6 * 1.0 = 6.0
    max_possible = QUESTIONS_PER_SPHERE * FIBONACCI_SCORES[MAX_ANSWER]  # 6 * 5.0 = 30.0
    
    normalized = ((raw_score - min_possible) / (max_possible - min_possible)) * 9 + 1
    return round(max(1.0, min(10.0, normalized)), 1)

def calculate_sphere_score(answers: List[int], inverse_questions: List[bool] = None) -> Tuple[float, float]:
    """–†–∞—Å—á–µ—Ç —Å—ã—Ä–æ–≥–æ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –¥–ª—è —Å—Ñ–µ—Ä—ã."""
    if len(answers) != QUESTIONS_PER_SPHERE:
        raise ValueError(f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ {QUESTIONS_PER_SPHERE} –æ—Ç–≤–µ—Ç–æ–≤")
    
    if not all(MIN_ANSWER <= a <= MAX_ANSWER for a in answers):
        raise ValueError(f"–í—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ –æ—Ç {MIN_ANSWER} –¥–æ {MAX_ANSWER}")
    
    if inverse_questions is None:
        inverse_questions = [False] * QUESTIONS_PER_SPHERE
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∫–∞–ª—É –§–∏–±–æ–Ω–∞—á—á–∏ –∫ –∫–∞–∂–¥–æ–º—É –æ—Ç–≤–µ—Ç—É
    raw_score = sum(apply_fibonacci_score(a, inv) for a, inv in zip(answers, inverse_questions))
    normalized_score = normalize_sphere_score(raw_score)
    
    return raw_score, normalized_score

def calculate_total_hpi(sphere_scores: Dict[str, float]) -> float:
    """–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ HPI —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤ —Å—Ñ–µ—Ä."""
    total_weighted_score = 0
    total_weight = 0

    for sphere, score in sphere_scores.items():
        weight = SPHERE_WEIGHTS.get(sphere)
        if weight is not None and isinstance(score, (int, float)):
            total_weighted_score += score * weight
            total_weight += weight

    if total_weight == 0:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–µ—Å–∞ –¥–ª—è —Å—Ñ–µ—Ä")

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ (1-10) –≤ —à–∫–∞–ª—É 20-100
    hpi_score = ((total_weighted_score / total_weight - 1) * (80/9)) + 20
    return round(max(20.0, min(100.0, hpi_score)), 1)

def extract_answers_from_section(content: str, section_name: str) -> Optional[List[int]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –∏–∑ —Å–µ–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞."""
    try:
        clean_section_name = section_name.replace("### ", "")
        number = clean_section_name.split('.')[0]
        name = '.'.join(clean_section_name.split('.')[1:]).strip()
        section_pattern = rf"##\s*{number}\.\s*.*?\s*{re.escape(name)}.*?(\n\|[\s\S]*?)(?=\n##|\Z)"

        print(f"[DEBUG] –ò—â–µ–º –ø–æ —à–∞–±–ª–æ–Ω—É: {section_pattern}")
        section_match = re.search(section_pattern, content, re.DOTALL | re.IGNORECASE)
        if not section_match:
            print(f"[DEBUG] –°–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {section_name}")
            return []
        section_table = section_match.group(1)
        print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏: {section_table}")
        answers = []
        for line in section_table.splitlines():
            line = line.strip()
            if not line or line.startswith(":---") or ":---" in line:
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            cells = [c.strip() for c in line.strip("|").split("|")]
            if not cells or cells[0] == "–í–æ–ø—Ä–æ—Å":
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É-–∑–∞–≥–æ–ª–æ–≤–æ–∫
            if cells and cells[-1].isdigit():
                answers.append(int(cells[-1]))
            print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏: {line} -> {cells}")
            if len(answers) == 6:
                break  # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 6 –æ—Ç–≤–µ—Ç–æ–≤
        print(f"[DEBUG] –ò—Ç–æ–≥–æ–≤—ã–µ 6 –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è {section_name}: {answers}")
        return answers
    except Exception as e:
        print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–µ–∫—Ü–∏–∏ {section_name}: {e}")
        return []

def process_hpi_report(file_path: str) -> Dict[str, float]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞ –∏ —Ä–∞—Å—á–µ—Ç –≤—Å–µ—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        raise IOError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

    sphere_scores = {}
    all_data_valid = True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
    for sphere in SPHERE_CONFIG:
        try:
            # –ò—â–µ–º —Å–µ–∫—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ "## 1. –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏"
            section_name = f"{sphere['number']}. {sphere['name']}"
            answers = extract_answers_from_section(content, section_name)
            
            if answers and len(answers) == QUESTIONS_PER_SPHERE:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
                inverse_questions = [False] * QUESTIONS_PER_SPHERE
                if sphere["number"] in ["4", "6", "8"]:  # –°—Ñ–µ—Ä—ã —Å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
                    inverse_questions[-1] = True  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
                
                _, normalized_score = calculate_sphere_score(answers, inverse_questions)
                sphere_scores[sphere["number"]] = normalized_score
            else:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í —Å—Ñ–µ—Ä–µ '{section_name}' –Ω–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                sphere_scores[sphere["number"]] = 0.0
                all_data_valid = False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —Å—Ñ–µ—Ä—ã {section_name}: {e}")
            sphere_scores[sphere["number"]] = 0.0
            all_data_valid = False

    # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ HPI
    try:
        hpi_total = calculate_total_hpi(sphere_scores)
        sphere_scores["HPI"] = hpi_total
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ HPI: {e}")
        sphere_scores["HPI"] = 0.0
        all_data_valid = False

    return sphere_scores

def get_score_emoji(score: float, is_hpi: bool = False) -> str:
    """Convert score to emoji indicator.
    
    Args:
        score: The score to convert
        is_hpi: Whether this is the overall HPI score (uses 20-100 scale) or sphere score (uses 1-10 scale)
    """
    if is_hpi:
        # –®–∫–∞–ª–∞ –¥–ª—è –æ–±—â–µ–≥–æ HPI (20-100)
        if score >= 80:
            return "üü¢"  # Excellent
        elif score >= 60:
            return "üîµ"  # Good
        elif score >= 40:
            return "üü°"  # Satisfactory
        else:
            return "üî¥"  # Needs attention
    else:
        # –®–∫–∞–ª–∞ –¥–ª—è —Å—Ñ–µ—Ä (1-10)
        if score >= 8.0:
            return "üü¢"  # Excellent
        elif score >= 6.0:
            return "üîµ"  # Good
        elif score >= 4.0:
            return "üü°"  # Satisfactory
        else:
            return "üî¥"  # Needs attention

def get_number_emoji(number: str) -> str:
    """Convert number to emoji digits."""
    # Format the number to ensure it has one decimal place
    try:
        formatted_number = f"{float(number):.1f}"
    except (ValueError, TypeError):
        return str(number)
    
    emoji_map = {
        "0": "0Ô∏è‚É£",
        "1": "1Ô∏è‚É£",
        "2": "2Ô∏è‚É£",
        "3": "3Ô∏è‚É£",
        "4": "4Ô∏è‚É£",
        "5": "5Ô∏è‚É£",
        "6": "6Ô∏è‚É£",
        "7": "7Ô∏è‚É£",
        "8": "8Ô∏è‚É£",
        "9": "9Ô∏è‚É£",
        ".": "."
    }
    return "".join(emoji_map.get(char, char) for char in formatted_number)

def find_latest_draft() -> Optional[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –ø–∞–ø–∫–µ DRAFT_FOLDER."""
    try:
        if not os.path.exists(DRAFT_FOLDER):
            print(f"–ü–∞–ø–∫–∞ —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DRAFT_FOLDER}")
            return None

        # –ò—â–µ–º —Ñ–∞–π–ª—ã –ø–æ –Ω–æ–≤–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É: YYYY-MM-DD_draft.md
        drafts = [os.path.join(DRAFT_FOLDER, f) for f in os.listdir(DRAFT_FOLDER) if f.endswith("_draft.md") and re.match(r"\d{4}-\d{2}-\d{2}", f)]
        
        if not drafts:
            print("–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É 'YYYY-MM-DD_draft.md' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return None
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        latest_draft = max(drafts, key=lambda x: re.search(r"(\d{4}-\d{2}-\d{2})", os.path.basename(x)).group(1))
        print(f"–ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ –¥–∞—Ç–µ –≤ –∏–º–µ–Ω–∏: {latest_draft}")
        return latest_draft
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
        return None

def create_final_report(draft_path: str, scores: Dict[str, float]) -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π."""
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        with open(draft_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        draft_filename = os.path.basename(draft_path)
        draft_date_match = re.match(r"(\d{4}-\d{2}-\d{2})", draft_filename)
        if draft_date_match:
            current_date = draft_date_match.group(1)
        else:
            current_date = datetime.now().strftime("%Y-%m-%d")
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_report_name = f"{current_date}_report.md"
        final_report_path = os.path.join(FINAL_FOLDER, final_report_name)

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        radar_filename = f"{current_date}_radar.png"
        radar_path = os.path.join(FINAL_FOLDER, "images", radar_filename)
        os.makedirs(os.path.dirname(radar_path), exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        create_radar_chart(scores, radar_path)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ
        content = re.sub(r'–î–∞—Ç–∞: \d{4}-\d{2}-\d{2}', f'–î–∞—Ç–∞: {current_date}', content)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics_section = re.search(r'### üìä –ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏\n\|[^|]+\|[^|]+\|[^|]+\|[^|]+\|\n\|[^|]+\|[^|]+\|[^|]+\|[^|]+\|(.*?)(?=###|$)', content, re.DOTALL)
        if metrics_section:
            metrics_lines = metrics_section.group(1).strip().split('\n')
            unique_metrics = {}
            
            for line in metrics_lines:
                if not line.strip() or not line.startswith('|'):
                    continue
                    
                parts = [p.strip() for p in line.split('|') if p.strip()]
                if len(parts) >= 4:
                    sphere = parts[0]
                    metric = parts[1]
                    current = parts[2] if parts[2] else '-'
                    target = parts[3] if parts[3] else '-'
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Å—Ñ–µ—Ä—ã –∏ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∫ –∫–ª—é—á
                    key = (sphere, metric)
                    if key not in unique_metrics or (current != '-' and target != '-'):
                        unique_metrics[key] = (current, target)

            # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ–∫—Ü–∏—é –º–µ—Ç—Ä–∏–∫ –Ω–∞ –Ω–æ–≤—É—é
            new_metrics = "### üìä –ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏\n| –°—Ñ–µ—Ä–∞ | –ú–µ—Ç—Ä–∏–∫–∞ | –¢–µ–∫—É—â–µ–µ | –¶–µ–ª–µ–≤–æ–µ |\n|:---|:---|:---:|:---:|\n"
            for (sphere, metric), (current, target) in unique_metrics.items():
                new_metrics += f"| {sphere} | {metric} | {current} | {target} |\n"
            
            content = re.sub(r'### üìä –ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏.*?(?=###|$)', new_metrics, content, flags=re.DOTALL)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏
        content += "\n---\n\n## üèÜ –ò—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ HPI\n\n"
        content += f"![–†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞](./images/{radar_filename})\n\n"
        content += "| –°—Ñ–µ—Ä–∞ | –û—Ü–µ–Ω–∫–∞ (1-10) | –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä |\n"
        content += "|:---|:---:|:---:|\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä–µ
        for sphere in SPHERE_CONFIG:
            score = scores[sphere["number"]]
            emoji = get_score_emoji(score)
            content += f"| {sphere['name']} | {score:.1f} | {emoji} |\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π HPI
        total_hpi = calculate_total_hpi(scores)
        hpi_emoji = get_score_emoji(total_hpi, is_hpi=True)
        content += f"| **–ò—Ç–æ–≥–æ–≤—ã–π HPI** | **{total_hpi:.1f}** | {hpi_emoji} |\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        with open(final_report_path, 'w', encoding='utf-8') as f:
            f.write(content)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        traceback.print_exc()
        raise

def print_scores(scores):
    """–í—ã–≤–æ–¥–∏—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    print(f"HPI: {scores['HPI']:.1f} {get_score_emoji(scores['HPI'])}")
    for sphere in SPHERE_CONFIG:
        sphere_num = sphere["number"]
        print(f"{sphere['emoji']} {sphere['name']}: {scores[sphere_num]:.1f} {get_score_emoji(scores[sphere_num])}")

def run_calculator():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
    try:
        draft_path = find_latest_draft()
        if not draft_path:
            print("–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        print(f"–ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫: {draft_path}")
        
        scores = process_hpi_report(draft_path)
        print_scores(scores)
        
        create_final_report(draft_path, scores)

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    run_calculator() 