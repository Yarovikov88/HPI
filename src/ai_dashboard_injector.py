"""
HPI AI Dashboard Injector
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª AI_Recommendations.md —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ HPI.
"""
import locale
import os
import re
from datetime import datetime
from ai_recommendations import HPIRecommendationEngine
import random
import sys
from typing import Dict, List
import logging

# --- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ UTF-8 ---
try:
    locale.setlocale(locale.LC_ALL, 'C.UTF-8')
except locale.Error:
    print("Warning: Could not set locale to C.UTF-8. Emoji support might be limited.")
# --- –ö–æ–Ω–µ—Ü –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è UTF-8 ---

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DRAFTS_DIR = os.path.join(PROJECT_ROOT, 'reports_draft')
INTERFACES_DIR = os.path.join(PROJECT_ROOT, 'interfaces')
LOG_DIR = os.path.join(PROJECT_ROOT, 'logs')
LOG_FILE = os.path.join(LOG_DIR, 'app.log')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ñ–µ—Ä, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
SPHERES_CONFIG = [
    {"key": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏", "emoji": "üíñ"},
    {"key": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏", "emoji": "üè°"},
    {"key": "–î—Ä—É–∑—å—è", "emoji": "ü§ù"},
    {"key": "–ö–∞—Ä—å–µ—Ä–∞", "emoji": "üíº"},
    {"key": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "emoji": "‚ôÇÔ∏è"},
    {"key": "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "emoji": "üß†"},
    {"key": "–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è", "emoji": "üé®"},
    {"key": "–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ", "emoji": "üí∞"}
]

# --- –£–¢–ò–õ–ò–¢–´ ---

def find_latest_draft() -> str | None:
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –ø–∞–ø–∫–µ."""
    logging.info("–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞...")
    if not os.path.exists(DRAFTS_DIR):
        logging.error(f"–ü–∞–ø–∫–∞ —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DRAFTS_DIR}")
        return None
    
    drafts = [os.path.join(DRAFTS_DIR, f) for f in os.listdir(DRAFTS_DIR) if f.endswith("_draft.md")]
    if not drafts:
        logging.error("–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %s", DRAFTS_DIR)
        return None
    
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(drafts)} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤. –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π...")
    latest_draft = max(drafts, key=os.path.getmtime)
    logging.info(f"–í—ã–±—Ä–∞–Ω —á–µ—Ä–Ω–æ–≤–∏–∫: {latest_draft}")
    return latest_draft

def parse_pro_data(md_content: str) -> Dict[str, Dict[str, str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ PRO-–¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ–±–ª–µ–º—ã, —Ü–µ–ª–∏ –∏ —Ç.–¥.) –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ª–æ–≤–∞—Ä—å {—Å—Ñ–µ—Ä–∞: –æ—Ç–≤–µ—Ç}.
    """
    logging.info("–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ PRO-—Å–µ–∫—Ü–∏–π –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞.")
    pro_sections = ['–ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã', '–ú–æ–∏ —Ü–µ–ª–∏', '–ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã', '–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è']
    all_pro_data = {section: {} for section in pro_sections}

    for section_title in pro_sections:
        logging.debug(f"–ü–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–∏: '{section_title}'")
        section_data = {}
        in_section = False
        lines = md_content.split('\n')
        
        for i, line in enumerate(lines):
            if section_title in line and line.strip().startswith('###'):
                logging.debug(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å–µ–∫—Ü–∏–∏: '{line.strip()}'")
                for table_line in lines[i+1:]:
                    if table_line.strip().startswith('###'):
                        logging.debug(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ '{section_title}', –Ω–∞–π–¥–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è: '{table_line.strip()}'")
                        break 
                    
                    if table_line.strip().startswith('|'):
                        parts = [p.strip() for p in table_line.split('|') if p.strip()]
                        logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {parts}")
                        if len(parts) >= 2:
                            sphere_candidate = parts[0]
                            answer = parts[1]
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç "–Ω–µ—Ç" –∏–ª–∏ –ø—É—Å—Ç–æ–π
                            final_answer = answer if answer and answer.lower() not in ['–Ω–µ—Ç', ''] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

                            for config in SPHERES_CONFIG:
                                if config['key'] in sphere_candidate or config['emoji'] in sphere_candidate:
                                    section_data[config['key']] = final_answer
                                    logging.debug(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: –°—Ñ–µ—Ä–∞='{config['key']}', –û—Ç–≤–µ—Ç='{final_answer}'")
                                    break
                all_pro_data[section_title] = section_data
                logging.info(f"–î–ª—è —Å–µ–∫—Ü–∏–∏ '{section_title}' –∏–∑–≤–ª–µ—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {section_data}")
                break # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π PRO-—Å–µ–∫—Ü–∏–∏
    
    logging.info(f"–ü–∞—Ä—Å–∏–Ω–≥ PRO-—Å–µ–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {all_pro_data}")
    return all_pro_data

def run_injector():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –Ω–∞—Ö–æ–¥–∏—Ç —á–µ—Ä–Ω–æ–≤–∏–∫, –ø–∞—Ä—Å–∏—Ç –µ–≥–æ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥.
    """
    logging.info("--- üöÄ –ó–∞–ø—É—Å–∫ AI Dashboard Injector (–º–µ—Ç–æ–¥ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏) ---")

    latest_draft = find_latest_draft()
    if not latest_draft:
        logging.critical("–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫.")
        return

    logging.info(f"–ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞: {latest_draft}")
    try:
        with open(latest_draft, 'r', encoding='utf-8') as f:
            draft_content = f.read()
    except FileNotFoundError:
        logging.critical(f"–§–∞–π–ª —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {latest_draft}")
        return
    except Exception as e:
        logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}", exc_info=True)
        return

    pro_data = parse_pro_data(draft_content)
    # logging.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ PRO-—Å–µ–∫—Ü–∏–π –∏–∑–≤–ª–µ—á–µ–Ω—ã: {pro_data}")

    dashboard_lines = [
        "# HPI", "",
        "> [!tip]- üìä –ú–æ–π HPI", ">",
        "> ## –î–∏–Ω–∞–º–∏–∫–∞ HPI", "> ![hpi trend](../reports_final/images/latest_trend.png)", ">",
        "> ## –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π", "> | –î–∞—Ç–∞ | HPI | –¢—Ä–µ–Ω–¥ |", "> |------|-----|--------|", "",
        "> [!tip]- ‚öñÔ∏è HPI –±–∞–ª–∞–Ω—Å", ">",
        "> ![radar chart](../reports_final/images/latest_radar.png)", ">",
        "> ## –ò—Å—Ç–æ—Ä–∏—è –ø–æ —Å—Ñ–µ—Ä–∞–º", "> | –î–∞—Ç–∞ | üíñ | üè° | ü§ù | üíº | ‚ôÇÔ∏è | üß† | üé® | üí∞ |",
        "> |------|------|------|------|------|------|------|------|------|", "",
        "# HPI PRO", ""
    ]

    section_map = {
        '–ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã': 'üõë', '–ú–æ–∏ —Ü–µ–ª–∏': 'üéØ',
        '–ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã': 'üöß', '–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è': 'üèÜ'
    }
    
    for section_title, emoji in section_map.items():
        dashboard_lines.extend([
            f"> [!info]- {emoji} {section_title}", ">",
            "> | –°—Ñ–µ—Ä–∞ | –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã |", "> |:------:|-------------|"
        ])
        
        section_answers = pro_data.get(section_title, {})
        
        for sphere_config in SPHERES_CONFIG:
            sphere_key = sphere_config['key']
            sphere_emoji = sphere_config['emoji']
            answer = section_answers.get(sphere_key, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            dashboard_lines.append(f"> |  {sphere_emoji}  | {answer} |")
        
        dashboard_lines.append("")

    dashboard_path = os.path.join(INTERFACES_DIR, 'dashboard.md')
    final_dashboard_content = "\n".join(dashboard_lines)

    logging.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ –ø—É—Ç–∏: {dashboard_path}")
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
    # logging.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:\n---\n{final_dashboard_content}\n---")

    try:
        logging.info("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –¥–∞—à–±–æ—Ä–¥–∞...")
        with open(dashboard_path, 'w', encoding='utf-8') as f:
            f.write(final_dashboard_content)
        logging.info(f"–î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω: {dashboard_path}")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –¥–∞—à–±–æ—Ä–¥: {e}", exc_info=True)

    logging.info("--- ‚úÖ AI Dashboard Injector –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É ---")

if __name__ == "__main__":
    run_injector() 