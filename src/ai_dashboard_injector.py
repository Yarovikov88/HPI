"""
HPI AI Dashboard Injector
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª AI_Recommendations.md —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ HPI.
"""
import locale
import os
import re
from datetime import datetime
from ai_recommendations import HPIRecommendationEngine
import random
import sys
from typing import Dict, List, Optional
import logging
from trend import generate_trend_chart
import json

# --- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ UTF-8 ---
try:
    locale.setlocale(locale.LC_ALL, 'C.UTF-8')
except locale.Error:
    print("Warning: Could not set locale to C.UTF-8. Emoji support might be limited.")
# --- –ö–æ–Ω–µ—Ü –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è UTF-8 ---

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DRAFTS_DIR = os.path.join(PROJECT_ROOT, 'reports_draft')
INTERFACES_DIR = os.path.join(PROJECT_ROOT, 'interfaces')
LOG_DIR = os.path.join(PROJECT_ROOT, 'logs')
LOG_FILE = os.path.join(LOG_DIR, 'app.log')
REPORTS_FINAL_DIR = os.path.join(PROJECT_ROOT, 'reports_final')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ñ–µ—Ä, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
SPHERES_CONFIG = [
    {"key": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏", "emoji": "üíñ"},
    {"key": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏", "emoji": "üè°"},
    {"key": "–î—Ä—É–∑—å—è", "emoji": "ü§ù"},
    {"key": "–ö–∞—Ä—å–µ—Ä–∞", "emoji": "üíº"},
    {"key": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "emoji": "‚ôÇÔ∏è"},
    {"key": "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "emoji": "üß†"},
    {"key": "–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è", "emoji": "üé®"},
    {"key": "–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ", "emoji": "üí∞"}
]

def parse_questions_database() -> Dict[str, List[str]]:
    """
    –ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª questions.md –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç—Ä–∏–∫.
    """
    db_path = os.path.join(PROJECT_ROOT, 'database', 'questions.md')
    if not os.path.exists(db_path):
        logging.error(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_path}")
        return {}

    with open(db_path, 'r', encoding='utf-8') as f:
        content = f.read()

    sphere_metrics = {}
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ JSON-–±–ª–æ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
    # –ò—â–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏–ø–∞ "## üíñ –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏" –∏ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞ –Ω–∏–º –±–ª–æ–∫ ```json ... ```
    pattern = re.compile(r"##\s*(?P<emoji>[\U0001F000-\U0001FA95\s\S]+?)\s*(?P<name>.*?)\n```json\n([\s\S]+?)\n```", re.DOTALL)

    matches = pattern.finditer(content)
    
    for match in matches:
        sphere_name = match.group('name').strip()
        json_content = match.group(3)

        try:
            data = json.loads(json_content)
            for item in data:
                if item.get("category") == "metrics" and "metrics" in item:
                    # –°–æ–±–∏—Ä–∞–µ–º –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä—ã
                    metric_names = [m.get("name") for m in item["metrics"] if m.get("name")]
                    if sphere_name in [s['key'] for s in SPHERES_CONFIG]:
                        sphere_metrics[sphere_name] = metric_names
        except json.JSONDecodeError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è —Å—Ñ–µ—Ä—ã '{sphere_name}': {e}")
            continue
            
    logging.info(f"–ò–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {len(sphere_metrics)} —Å—Ñ–µ—Ä.")
    return sphere_metrics

# --- –£–¢–ò–õ–ò–¢–´ ---

def get_score_emoji(score: float, is_hpi: bool = False) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ü–µ–Ω–∫—É –≤ emoji-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä."""
    if is_hpi:
        if score >= 80: return "üü¢"
        if score >= 60: return "üîµ"
        if score >= 40: return "üü°"
        return "üî¥"
    else:
        if score >= 8.0: return "üü¢"
        if score >= 6.0: return "üîµ"
        if score >= 4.0: return "üü°"
        return "üî¥"

def collect_reports_history() -> List[Dict]:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é HPI –∏ –æ—Ü–µ–Ω–æ–∫ –ø–æ —Å—Ñ–µ—Ä–∞–º –∏–∑ –≤—Å–µ—Ö —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –æ—Ç—á–µ—Ç.
    """
    history = []
    if not os.path.exists(REPORTS_FINAL_DIR):
        logging.error(f"–ü–∞–ø–∫–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {REPORTS_FINAL_DIR}")
        return []

    report_files = [f for f in os.listdir(REPORTS_FINAL_DIR) if f.endswith("_report.md")]
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(report_files)} –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏.")

    for filename in report_files:
        try:
            date_str = filename.split('_')[0]
            report_date = datetime.strptime(date_str, "%Y-%m-%d")
            
            filepath = os.path.join(REPORTS_FINAL_DIR, filename)
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            
            report_data = {'date': report_date, 'scores': {}}

            hpi_match = re.search(r'\|\s*\*\*–ò—Ç–æ–≥–æ–≤—ã–π HPI\*\*\s*\|\s*\*\*([\d\.]+)\*\*\s*\|', content)
            if hpi_match:
                report_data['hpi'] = float(hpi_match.group(1))
            
            for sphere in SPHERES_CONFIG:
                pattern = rf"\| {re.escape(sphere['key'])} \| ([\d\.]+) \|"
                match = re.search(pattern, content)
                if match:
                    report_data['scores'][sphere['key']] = float(match.group(1))

            if 'hpi' in report_data:
                history.append(report_data)
            else:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ HPI –≤ –æ—Ç—á–µ—Ç–µ: {filename}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–∞ {filename} –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            continue
    
    history.sort(key=lambda x: x['date'])
    logging.info(f"–°–æ–±—Ä–∞–Ω–æ {len(history)} –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏.")
    return history

def normalize_sphere_name(name):
    """
    –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏, –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É.
    """
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ (–æ–Ω–∏ –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞—é—Ç 2 –±–∞–π—Ç–∞)
    name = ''.join(c for c in name if len(c.encode('utf-8')) == 1)
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    return name.strip().lower()

class HPIRecommendationEngine:
    def __init__(self):
        self._emoji_to_sphere = {
            "üíñ": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏",
            "üè°": "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏",
            "ü§ù": "–î—Ä—É–∑—å—è",
            "üíº": "–ö–∞—Ä—å–µ—Ä–∞",
            "‚ôÇÔ∏è": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
            "üß†": "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
            "üé®": "–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è",
            "üí∞": "–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ"
        }
        self._sphere_to_emoji = {v: k for k, v in self._emoji_to_sphere.items()}

    def _extract_sphere_values(self, report_content: str) -> Dict[str, float]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ñ–µ—Ä –∏–∑ –æ—Ç—á–µ—Ç–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {—Å—Ñ–µ—Ä–∞: –∑–Ω–∞—á–µ–Ω–∏–µ}.
        """
        sphere_values = {}
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —ç–º–æ–¥–∑–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        pattern = r'([üíñüè°ü§ùüíº‚ôÇÔ∏èüß†üé®üí∞])\s+([^:]+):\s+(\d+\.\d+)\s+[üü¢üü°üî¥]'
        matches = re.finditer(pattern, report_content)
        
        for match in matches:
            emoji = match.group(1)
            sphere = match.group(2).strip()
            value = float(match.group(3))
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–º–æ–¥–∑–∏ –≤ –∫–ª—é—á —Å—Ñ–µ—Ä—ã
            sphere_key = self._emoji_to_sphere.get(emoji)
            if sphere_key:
                sphere_values[sphere_key] = value
                logging.info(f"[AI DASHBOARD] –ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ñ–µ—Ä—ã {sphere_key}: {value}")
        
        if not sphere_values:
            logging.warning("[AI DASHBOARD] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ñ–µ—Ä –∏–∑ –æ—Ç—á–µ—Ç–∞")
            
        return sphere_values

    def generate_recommendations(self, pro_data: Dict, report_content: str) -> Dict[str, str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ PRO-–¥–∞–Ω–Ω—ã—Ö –∏ –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ñ–µ—Ä –∏–∑ –æ—Ç—á–µ—Ç–∞.
        """
        sphere_values = self._extract_sphere_values(report_content)
        logging.info(f"[AI DASHBOARD] sphere_values (–∏–∑ –æ—Ç—á—ë—Ç–∞): {sphere_values}")
        
        recommendations = {}
        for sphere_config in SPHERES_CONFIG:
            sphere = sphere_config['key']
            emoji = sphere_config['emoji']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ñ–µ—Ä—ã
            problem = pro_data.get('–ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã', {}).get(sphere, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            goal = pro_data.get('–ú–æ–∏ —Ü–µ–ª–∏', {}).get(sphere, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            blocker = pro_data.get('–ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã', {}).get(sphere, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            value = sphere_values.get(sphere, 0.0)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            recommendation = self._generate_sphere_recommendation(sphere, problem, goal, blocker, value)
            recommendations[sphere] = f"> | {emoji} | {recommendation} |"
            logging.info(f"[AI DASHBOARD] –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {recommendations[sphere]}")
        
        return recommendations

    def _generate_sphere_recommendation(self, sphere: str, problem: str, goal: str, blocker: str, value: float) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ñ–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        """
        if problem != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
            if '—Ä–µ–¥–∫–æ' in problem.lower():
                return f"–í—ã —É–∫–∞–∑–∞–ª–∏, —á—Ç–æ {problem.lower()}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –≤—Å—Ç—Ä–µ—á—É –∏–ª–∏ –∑–≤–æ–Ω–æ–∫."
            elif '–≤—ã–≥–æ—Ä–∞–Ω–∏–µ' in problem.lower():
                return "–î–ª—è –±–æ—Ä—å–±—ã —Å –≤—ã–≥–æ—Ä–∞–Ω–∏–µ–º –≤–∞–∂–Ω–æ –Ω–∞–π—Ç–∏ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –æ—Ç–¥—ã—Ö–æ–º. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞."
            elif '–∞–ø–∞—Ç–∏—è' in problem.lower() or '—Ñ–æ–∫—É—Å' in problem.lower():
                return "–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –ø–æ–º–æ–¥–æ—Ä–æ: 25 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã, 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞."
            elif '—Ä–∞—Å—Ö–æ–¥' in problem.lower():
                return "–°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –≤–µ–¥–∏—Ç–µ –µ—ë –µ–∂–µ–¥–Ω–µ–≤–Ω–æ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã."
        
        if goal != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
            if '–æ—Ç–ø—É—Å–∫' in goal.lower():
                return "–î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ –∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞—Ç."
            elif '–∑–≤–æ–Ω–∏—Ç—å' in goal.lower() or '–∑–≤–æ–Ω–∫–∏' in goal.lower():
                return "–í–Ω–µ—Å–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
            elif '–≤—Å—Ç—Ä–µ—á' in goal.lower():
                return "–°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤—Å–µ—Ö –≤—Ä–µ–º—è."
            elif '—Ä–∞–±–æ—Ç—É' in goal.lower():
                return "–î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–∏—Ç–µ —Ä–µ–∑—é–º–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ 1-2 –ø–ª–æ—â–∞–¥–∫–∞—Ö."
            elif '–±–µ–∂–∞—Ç—å' in goal.lower() or '–∫–º' in goal.lower():
                return "–ù–∞—á–Ω–∏—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–æ–±–µ–∂–µ–∫ –ø–æ 1-2 –∫–º, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—é."
            elif '–∫—É—Ä—Å' in goal.lower() or '–º–µ–¥–∏—Ç–∞—Ü' in goal.lower():
                return "–í—ã–¥–µ–ª–∏—Ç–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏–π –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ."
            elif '–º–∞—Å—Ç–µ—Ä' in goal.lower() or '–∫–ª–∞—Å—Å' in goal.lower():
                return "–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –æ–Ω–ª–∞–π–Ω –∏ –æ—Ñ–ª–∞–π–Ω, —Å–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
            elif '–¥–æ—Ö–æ–¥' in goal.lower() or '–æ—Ç–∫–ª–∞–¥' in goal.lower():
                return "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞ —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç."
        
        if blocker != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
            if '–≤—Ä–µ–º—è' in blocker.lower():
                return "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞—É–¥–∏—Ç —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."
            elif '—É—Å—Ç–∞–ª' in blocker.lower():
                return "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞ –Ω–∞ —É—Ç—Ä–æ, –∫–æ–≥–¥–∞ —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –≤—ã—à–µ."
            elif '—Å—Ç—Ä–∞—Ö' in blocker.lower() or '–Ω–µ—É–≤–µ—Ä' in blocker.lower():
                return "–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–∫—Ä–µ–ø–∏—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å."
            elif '–ª–µ–Ω—å' in blocker.lower():
                return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É '–¥–≤—É—Ö –º–∏–Ω—É—Ç': –Ω–∞—á–Ω–∏—Ç–µ —Å —Å–æ–≤—Å–µ–º –Ω–µ–±–æ–ª—å—à–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
            elif '–ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü' in blocker.lower():
                return "–†–∞–∑–±–µ–π—Ç–µ –±–æ–ª—å—à—É—é –∑–∞–¥–∞—á—É –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ, –ª–µ–≥–∫–æ –≤—ã–ø–æ–ª–Ω–∏–º—ã–µ —à–∞–≥–∏."
            elif '–∏–Ω—Ñ–ª—è—Ü' in blocker.lower():
                return "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –Ω–∞–π–¥–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–∞."
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ñ–µ—Ä–∞–º
        base_recommendations = {
            "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏": "–£–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—á–µ—Ä.",
            "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–µ–º—å–µ–π. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –∏–ª–∏ –≤—Å—Ç—Ä–µ—á–∏.",
            "–î—Ä—É–∑—å—è": "–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –≤—Å—Ç—Ä–µ—á—É —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –æ–Ω–ª–∞–π–Ω-—Å–æ–∑–≤–æ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–≤—è–∑–∏.",
            "–ö–∞—Ä—å–µ—Ä–∞": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –∏ —Å–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—è—Ü—ã.",
            "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ": "–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫: —É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞, –ø—Ä–æ–≥—É–ª–∫–∏, –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ.",
            "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ": "–í—ã–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ. –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏.",
            "–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è": "–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –Ω–∞–π–¥–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ.",
            "–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ": "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞–Ω –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤."
        }
        
        return base_recommendations.get(sphere, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å.")

def find_latest_draft() -> str | None:
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –ø–∞–ø–∫–µ."""
    logging.info("–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞...")
    if not os.path.exists(DRAFTS_DIR):
        logging.error(f"–ü–∞–ø–∫–∞ —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DRAFTS_DIR}")
        return None
    
    drafts = [os.path.join(DRAFTS_DIR, f) for f in os.listdir(DRAFTS_DIR) if f.endswith("_draft.md")]
    if not drafts:
        logging.error("–ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %s", DRAFTS_DIR)
        return None
    
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(drafts)} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤. –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π...")
    latest_draft = max(drafts, key=os.path.getmtime)
    logging.info(f"–í—ã–±—Ä–∞–Ω —á–µ—Ä–Ω–æ–≤–∏–∫: {latest_draft}")
    return latest_draft

def parse_pro_data(md_content: str) -> Dict[str, Dict[str, str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ PRO-–¥–∞–Ω–Ω—ã–µ –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏.
    –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–µ–∫—Ü–∏–π –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ª–æ–≤–∞—Ä—å {—Å—Ñ–µ—Ä–∞: –æ—Ç–≤–µ—Ç}.
    –î–ª—è '–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏' –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π [{'sphere': —Å—Ñ–µ—Ä–∞, 'metric': –º–µ—Ç—Ä–∏–∫–∞, ...}].
    """
    logging.info("–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ PRO-—Å–µ–∫—Ü–∏–π –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞.")
    pro_sections = ['–ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã', '–ú–æ–∏ —Ü–µ–ª–∏', '–ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã', '–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', '–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏']
    all_pro_data = {}

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —ç–º–æ–¥–∑–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ñ–µ—Ä—ã
    emoji_map = {config['key']: config['emoji'] for config in SPHERES_CONFIG}
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–∞ –ø–æ —ç–º–æ–¥–∑–∏
    emoji_to_key = {config['emoji']: config['key'] for config in SPHERES_CONFIG}

    for section_title in pro_sections:
        logging.debug(f"–ü–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–∏: '{section_title}'")
        lines = md_content.split('\n')
        
        for i, line in enumerate(lines):
            if section_title in line and line.strip().startswith('###'):
                logging.debug(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å–µ–∫—Ü–∏–∏: '{line.strip()}'")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è '–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏'
                if section_title == '–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏':
                    metrics_data = []
                    for table_line in lines[i+1:]:
                        if table_line.strip().startswith('###'): break
                        if not table_line.strip().startswith('|'): continue
                        
                        parts = [p.strip() for p in table_line.split('|') if p.strip()]
                        if len(parts) >= 4 and '---' not in parts[0]:
                            sphere_candidate = parts[0]
                            # –ò—â–µ–º, –∫ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–∞
                            for config in SPHERES_CONFIG:
                                if config['key'] in sphere_candidate or config['emoji'] in sphere_candidate:
                                    metrics_data.append({
                                        'sphere': config['key'],  # –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏
                                        'metric': parts[1],
                                        'current': parts[2],
                                        'target': parts[3]
                                    })
                                    break
                    all_pro_data[section_title] = metrics_data
                    logging.info(f"–î–ª—è —Å–µ–∫—Ü–∏–∏ '{section_title}' –∏–∑–≤–ª–µ—á–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏: {metrics_data}")
                else:
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
                    section_data = {}
                    current_sphere_key = None
                    for table_line in lines[i+1:]:
                        if table_line.strip().startswith('###'): break
                        if not table_line.strip().startswith('|'): continue

                        parts = [p.strip() for p in table_line.split('|') if p.strip()]
                        if len(parts) >= 2:
                            sphere_candidate = parts[0]
                            answer = parts[1]
                            final_answer = answer if answer and answer.lower() not in ['–Ω–µ—Ç', ''] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤–∞—è –ª–∏ —ç—Ç–æ —Å—Ñ–µ—Ä–∞
                            found_sphere = False
                            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ–¥–∑–∏
                            for emoji in emoji_to_key:
                                if emoji in sphere_candidate:
                                    current_sphere_key = emoji_to_key[emoji]
                                    section_data[current_sphere_key] = final_answer
                                    found_sphere = True
                                    break
                            
                            # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ñ–µ—Ä—ã
                            if not found_sphere:
                                normalized_candidate = normalize_sphere_name(sphere_candidate)
                                for config in SPHERES_CONFIG:
                                    if normalize_sphere_name(config['key']) in normalized_candidate:
                                        current_sphere_key = config['key']
                                        section_data[current_sphere_key] = final_answer
                                        found_sphere = True
                                        break
                            
                            # –ï—Å–ª–∏ —Å—Ñ–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é
                            if not found_sphere and current_sphere_key and section_data.get(current_sphere_key) != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö":
                               section_data[current_sphere_key] += f"\\n{final_answer}"

                    all_pro_data[section_title] = section_data
                    logging.info(f"–î–ª—è —Å–µ–∫—Ü–∏–∏ '{section_title}' –∏–∑–≤–ª–µ—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {section_data}")
                
                break
    
    logging.info(f"–ü–∞—Ä—Å–∏–Ω–≥ PRO-—Å–µ–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω.")
    return all_pro_data

def get_latest_report() -> Optional[str]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –æ—Ç—á–µ—Ç—É.
    """
    reports_dir = os.path.join(PROJECT_ROOT, 'reports_final')
    if not os.path.exists(reports_dir):
        return None
    
    reports = [f for f in os.listdir(reports_dir) if f.endswith('_report.md')]
    if not reports:
        return None
    
    latest_report = max(reports)
    return os.path.join(reports_dir, latest_report)

def generate_dummy_recommendations(pro_data: Dict) -> Dict[str, str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç '—Ñ–∞–ª—å—à–∏–≤—ã–µ' AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ PRO-–¥–∞–Ω–Ω—ã—Ö.
    –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ AI-–º–æ–¥—É–ª—è.
    """
    recommendations = {}
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ PRO-—Å–µ–∫—Ü–∏–π
    problems = pro_data.get('–ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã', {})
    goals = pro_data.get('–ú–æ–∏ —Ü–µ–ª–∏', {})
    blockers = pro_data.get('–ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã', {})
    metrics = {m['sphere']: m for m in pro_data.get('–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏', [])}
    
    # –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for sphere_config in SPHERES_CONFIG:
        sphere = sphere_config['key']
        problem = problems.get(sphere)
        goal = goals.get(sphere)
        blocker = blockers.get(sphere)
        metric = metrics.get(sphere)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ñ–µ—Ä—ã
        if problem != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' or goal or blocker != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' or metric:
            recommendation = ""
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
            if problem and problem != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
                if '—Ä–µ–¥–∫–æ' in problem.lower():
                    recommendation = f"–í—ã —É–∫–∞–∑–∞–ª–∏, —á—Ç–æ {problem.lower()}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –≤—Å—Ç—Ä–µ—á—É –∏–ª–∏ –∑–≤–æ–Ω–æ–∫."
                elif '–≤—ã–≥–æ—Ä–∞–Ω–∏–µ' in problem.lower():
                    recommendation = "–î–ª—è –±–æ—Ä—å–±—ã —Å –≤—ã–≥–æ—Ä–∞–Ω–∏–µ–º –≤–∞–∂–Ω–æ –Ω–∞–π—Ç–∏ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –æ—Ç–¥—ã—Ö–æ–º. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞."
                elif '–∞–ø–∞—Ç–∏—è' in problem.lower() or '—Ñ–æ–∫—É—Å' in problem.lower():
                    recommendation = "–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –ø–æ–º–æ–¥–æ—Ä–æ: 25 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã, 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞."
                elif '—Ä–∞—Å—Ö–æ–¥' in problem.lower():
                    recommendation = "–°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –≤–µ–¥–∏—Ç–µ –µ—ë –µ–∂–µ–¥–Ω–µ–≤–Ω–æ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã."
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–ª—å
            if not recommendation and goal:
                if '–æ—Ç–ø—É—Å–∫' in goal.lower():
                    recommendation = "–î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ –∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞—Ç."
                elif '–∑–≤–æ–Ω–∏—Ç—å' in goal.lower() or '–∑–≤–æ–Ω–∫–∏' in goal.lower():
                    recommendation = "–í–Ω–µ—Å–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
                elif '–≤—Å—Ç—Ä–µ—á' in goal.lower():
                    recommendation = "–°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤—Å–µ—Ö –≤—Ä–µ–º—è."
                elif '—Ä–∞–±–æ—Ç—É' in goal.lower():
                    recommendation = "–î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–∏—Ç–µ —Ä–µ–∑—é–º–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ 1-2 –ø–ª–æ—â–∞–¥–∫–∞—Ö."
                elif '–±–µ–∂–∞—Ç—å' in goal.lower() or '–∫–º' in goal.lower():
                    recommendation = "–ù–∞—á–Ω–∏—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–æ–±–µ–∂–µ–∫ –ø–æ 1-2 –∫–º, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—é."
                elif '–∫—É—Ä—Å' in goal.lower() or '–º–µ–¥–∏—Ç–∞—Ü' in goal.lower():
                    recommendation = "–í—ã–¥–µ–ª–∏—Ç–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏–π –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ."
                elif '–º–∞—Å—Ç–µ—Ä' in goal.lower() or '–∫–ª–∞—Å—Å' in goal.lower():
                    recommendation = "–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –æ–Ω–ª–∞–π–Ω –∏ –æ—Ñ–ª–∞–π–Ω, —Å–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
                elif '–¥–æ—Ö–æ–¥' in goal.lower() or '–æ—Ç–∫–ª–∞–¥' in goal.lower():
                    recommendation = "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞ —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç."
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–ª–æ–∫–µ—Ä
            if not recommendation and blocker and blocker != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
                if '–≤—Ä–µ–º—è' in blocker.lower():
                    recommendation = "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞—É–¥–∏—Ç —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."
                elif '—É—Å—Ç–∞–ª' in blocker.lower():
                    recommendation = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞ –Ω–∞ —É—Ç—Ä–æ, –∫–æ–≥–¥–∞ —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –≤—ã—à–µ."
                elif '—Å—Ç—Ä–∞—Ö' in blocker.lower() or '–Ω–µ—É–≤–µ—Ä' in blocker.lower():
                    recommendation = "–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–∫—Ä–µ–ø–∏—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å."
                elif '–ª–µ–Ω—å' in blocker.lower():
                    recommendation = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É '–¥–≤—É—Ö –º–∏–Ω—É—Ç': –Ω–∞—á–Ω–∏—Ç–µ —Å —Å–æ–≤—Å–µ–º –Ω–µ–±–æ–ª—å—à–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
                elif '–ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü' in blocker.lower():
                    recommendation = "–†–∞–∑–±–µ–π—Ç–µ –±–æ–ª—å—à—É—é –∑–∞–¥–∞—á—É –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ, –ª–µ–≥–∫–æ –≤—ã–ø–æ–ª–Ω–∏–º—ã–µ —à–∞–≥–∏."
                elif '–∏–Ω—Ñ–ª—è—Ü' in blocker.lower():
                    recommendation = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –Ω–∞–π–¥–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–∞."
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if not recommendation and metric:
                current = float(metric['current'])
                target = float(metric['target'])
                if current < target:
                    if '—à–∞–≥–æ–≤' in metric['metric'].lower():
                        recommendation = "–ü—Ä–∏–ø–∞—Ä–∫—É–π—Ç–µ –º–∞—à–∏–Ω—É –¥–∞–ª—å—à–µ –æ—Ç –≤—Ö–æ–¥–∞, –≤—ã—Ö–æ–¥–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–∞–Ω—å—à–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–µ—Å—Ç–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ –ª–∏—Ñ—Ç–∞."
                    elif '—Å—Ç—Ä–µ—Å—Å' in metric['metric'].lower():
                        recommendation = "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è."
                    elif '—Ö–æ–±–±–∏' in metric['metric'].lower():
                        recommendation = "–ó–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ö–æ–±–±–∏, –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –Ω–µ–º—É –∫–∞–∫ –∫ –≤–∞–∂–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ."
                    elif '—Å–±–µ—Ä–µ–∂–µ–Ω' in metric['metric'].lower():
                        recommendation = "–°–æ–∑–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç –¥–ª—è —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –¥–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã."
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é
            if not recommendation:
                base_recommendations = {
                    "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏": "–£–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—á–µ—Ä.",
                    "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–µ–º—å–µ–π. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–≤–æ–Ω–∫–∏ –∏–ª–∏ –≤—Å—Ç—Ä–µ—á–∏.",
                    "–î—Ä—É–∑—å—è": "–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –≤—Å—Ç—Ä–µ—á—É —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –æ–Ω–ª–∞–π–Ω-—Å–æ–∑–≤–æ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–≤—è–∑–∏.",
                    "–ö–∞—Ä—å–µ—Ä–∞": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –∏ —Å–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—è—Ü—ã.",
                    "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ": "–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫: —É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞, –ø—Ä–æ–≥—É–ª–∫–∏, –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ.",
                    "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ": "–í—ã–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ. –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏.",
                    "–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è": "–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –Ω–∞–π–¥–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ.",
                    "–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ": "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞–Ω –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤."
                }
                recommendation = base_recommendations.get(sphere, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å.")
            
            recommendations[sphere] = recommendation
    
    return recommendations

def run_injector():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –Ω–∞—Ö–æ–¥–∏—Ç —á–µ—Ä–Ω–æ–≤–∏–∫, –ø–∞—Ä—Å–∏—Ç –µ–≥–æ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥.
    """
    logging.info("--- üöÄ –ó–∞–ø—É—Å–∫ AI Dashboard Injector (–º–µ—Ç–æ–¥ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏) ---")

    latest_draft = find_latest_draft()
    if not latest_draft:
        logging.critical("–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫.")
        return

    logging.info(f"–ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞: {latest_draft}")
    try:
        with open(latest_draft, 'r', encoding='utf-8') as f:
            draft_content = f.read()
    except FileNotFoundError:
        logging.critical(f"–§–∞–π–ª —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {latest_draft}")
        return
    except Exception as e:
        logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}", exc_info=True)
        return

    pro_data = parse_pro_data(draft_content)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ë–î
    standard_metrics = parse_questions_database()

    reports_history = collect_reports_history()
    
    # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ ---
    trend_chart_path = generate_trend_chart(reports_history)
    if not trend_chart_path:
        trend_chart_path = "hpi/docs/images/trend_placeholder.png"
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞.")
        
    # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º –≥—Ä–∞—Ñ–∏–∫–∞–º ---
    latest_report_date_str = ""
    if reports_history:
        latest_report_date_str = reports_history[-1]['date'].strftime('%Y-%m-%d')
    
    radar_chart_path = f"reports_final/images/{latest_report_date_str}_radar.png" if latest_report_date_str else "hpi/docs/images/radar_placeholder.png"

    # --- –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ HPI ---
    hpi_history_rows = []
    if reports_history:
        for report in sorted(reports_history, key=lambda x: x['date'], reverse=True):
            hpi = report.get('hpi', 0.0)
            emoji = get_score_emoji(hpi, is_hpi=True)
            hpi_history_rows.append(f"| {report['date'].strftime('%Y-%m-%d')} | {hpi:.1f} | {emoji} |")
    
    # --- –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —Å—Ñ–µ—Ä–∞–º ---
    spheres_history_rows = []
    if reports_history:
        for report in sorted(reports_history, key=lambda x: x['date'], reverse=True):
            row = f"| {report['date'].strftime('%Y-%m-%d')} "
            for sphere_config in SPHERES_CONFIG:
                score = report.get('scores', {}).get(sphere_config['key'], '-')
                row += f"| {score} "
            row += "|"
            spheres_history_rows.append(row)

    hpi_history_table = "\n".join(hpi_history_rows) if hpi_history_rows else "| –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. | | |"
    
    spheres_header = "| –î–∞—Ç–∞ | " + " | ".join([s['emoji'] for s in SPHERES_CONFIG]) + " |\n|:---|:" + "---:|:" * (len(SPHERES_CONFIG)-1) + "---:|"
    spheres_history_table = spheres_header + "\n" + "\n".join(spheres_history_rows) if spheres_history_rows else "| –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö |" + " |" * len(SPHERES_CONFIG)
    
    # --- AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ---
    recommendations = generate_dummy_recommendations(pro_data)
    
    # --- –°–±–æ—Ä–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ ---
    dashboard_content = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    hpi_score = reports_history[-1]['hpi'] if reports_history else 0
    hpi_emoji = get_score_emoji(hpi_score, is_hpi=True)
    dashboard_content.append(f"## Human Performance Index: {hpi_score} {hpi_emoji}")

    # --- –î–∏–Ω–∞–º–∏–∫–∞ HPI (–≥—Ä–∞—Ñ–∏–∫ + —Ç–∞–±–ª–∏—Ü–∞) ---
    dinamika_content = []
    dinamika_content.append(f"![–î–∏–Ω–∞–º–∏–∫–∞ HPI](../../{trend_chart_path.replace(os.path.sep, '/')})")
    if hpi_history_table:
        dinamika_content.append("\n" + hpi_history_table)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è callout
    dinamika_formatted = "\n> ".join("\n".join(dinamika_content).split("\n"))
    dashboard_content.append(f'\n> [!note]- üìà –î–∏–Ω–∞–º–∏–∫–∞ HPI\n> {dinamika_formatted}')

    # --- –ë–∞–ª–∞–Ω—Å –ø–æ —Å—Ñ–µ—Ä–∞–º (–≥—Ä–∞—Ñ–∏–∫ + —Ç–∞–±–ª–∏—Ü–∞) ---
    balans_content = []
    balans_content.append(f"![–ë–∞–ª–∞–Ω—Å –ø–æ —Å—Ñ–µ—Ä–∞–º](../../{radar_chart_path.replace(os.path.sep, '/')})")
    if spheres_history_table:
        balans_content.append("\n" + spheres_history_table)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è callout
    balans_formatted = "\n> ".join("\n".join(balans_content).split("\n"))
    dashboard_content.append(f'\n> [!note]- ‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –ø–æ —Å—Ñ–µ—Ä–∞–º\n> {balans_formatted}')

    dashboard_content.append("\n---\n")
    dashboard_content.append("## PRO-—Ä–∞–∑–¥–µ–ª—ã")

    pro_section_callout_type = "example"  # –ï–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –≤—Å–µ—Ö PRO-–ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤

    # –ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã
    if pro_data.get('–ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã'):
        dashboard_content.append(f'\n> [!{pro_section_callout_type}]- üî¥ –ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã')
        dashboard_content.append("> | –°—Ñ–µ—Ä–∞ | –ü—Ä–æ–±–ª–µ–º–∞ |")
        dashboard_content.append("> |:---:|:---|")
        for sphere in SPHERES_CONFIG:
            problem = pro_data.get('–ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã', {}).get(sphere['key'], '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            if problem != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
                dashboard_content.append(f"> | {sphere['emoji']} | {problem} |")

    # –ú–æ–∏ —Ü–µ–ª–∏
    if pro_data.get('–ú–æ–∏ —Ü–µ–ª–∏'):
        dashboard_content.append(f'\n> [!{pro_section_callout_type}]- üéØ –ú–æ–∏ —Ü–µ–ª–∏')
        dashboard_content.append("> | –°—Ñ–µ—Ä–∞ | –¶–µ–ª—å |")
        dashboard_content.append("> |:---:|:---|")
        for sphere in SPHERES_CONFIG:
            goal = pro_data.get('–ú–æ–∏ —Ü–µ–ª–∏', {}).get(sphere['key'], '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            if goal != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
                dashboard_content.append(f"> | {sphere['emoji']} | {goal} |")

    # –ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã
    if pro_data.get('–ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã'):
        dashboard_content.append(f'\n> [!{pro_section_callout_type}]- üöß –ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã')
        dashboard_content.append("> | –°—Ñ–µ—Ä–∞ | –ë–ª–æ–∫–µ—Ä |")
        dashboard_content.append("> |:---:|:---|")
        for sphere in SPHERES_CONFIG:
            blocker = pro_data.get('–ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã', {}).get(sphere['key'], '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            if blocker != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
                dashboard_content.append(f"> | {sphere['emoji']} | {blocker} |")

    # –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if pro_data.get('–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'):
        dashboard_content.append(f'\n> [!{pro_section_callout_type}]- üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
        dashboard_content.append("> | –°—Ñ–µ—Ä–∞ | –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ |")
        dashboard_content.append("> |:---:|:---|")
        for sphere in SPHERES_CONFIG:
            achievement = pro_data.get('–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', {}).get(sphere['key'], '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            if achievement != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
                dashboard_content.append(f"> | {sphere['emoji']} | {achievement} |")

    # –ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏
    if pro_data.get('–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏') or standard_metrics:
        dashboard_content.append(f'\n> [!{pro_section_callout_type}]- üìä –ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏')
        dashboard_content.append("> | –°—Ñ–µ—Ä–∞ | –ú–µ—Ç—Ä–∏–∫–∞ | –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ | –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ |")
        dashboard_content.append("> |:---:|:---|:---:|:---:|")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        actual_metrics_list = pro_data.get('–ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏', [])
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {(—Å—Ñ–µ—Ä–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ): {–¥–∞–Ω–Ω—ã–µ}}
        actual_metrics_map = {(m['sphere'], m['metric']): m for m in actual_metrics_list}

        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º –∏–∑ –ë–î
        for sphere_config in SPHERES_CONFIG:
            sphere_key = sphere_config['key']
            sphere_emoji = sphere_config['emoji']
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä—ã
            for metric_name in standard_metrics.get(sphere_key, []):
                # –ò—â–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
                metric_data = actual_metrics_map.get((sphere_key, metric_name))
                if metric_data:
                    current = metric_data.get('current', '-')
                    target = metric_data.get('target', '-')
                    dashboard_content.append(f"> | {sphere_emoji} | {metric_name} | {current} | {target} |")

    # AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if recommendations:
        dashboard_content.append(f'\n> [!{pro_section_callout_type}]- ü§ñ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
        dashboard_content.append("> | –°—Ñ–µ—Ä–∞ | –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è |")
        dashboard_content.append("> |:---:|:---|")
        for sphere in SPHERES_CONFIG:
            recommendation = recommendations.get(sphere['key'])
            if recommendation:
                dashboard_content.append(f"> | {sphere['emoji']} | {recommendation} |")

    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ ---
    dashboard_path = os.path.join(INTERFACES_DIR, 'dashboard.md')
    try:
        with open(dashboard_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(dashboard_content))
        logging.info(f"–î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {dashboard_path}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {e}", exc_info=True)
        return

    logging.info("--- ‚úÖ AI Dashboard Injector —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É ---")


if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    log_formatter = logging.Formatter('[%(asctime)s] [%(levelname)s] %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    
    # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    console = logging.StreamHandler(sys.stdout)
    console.setFormatter(log_formatter)
    
    # –ö–æ—Ä–µ–Ω—å –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)
    if root_logger.hasHandlers():
        root_logger.handlers.clear()
    root_logger.addHandler(console)

    run_injector() 