"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π HPI
"""
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime
import re
import os
import sys
import logging
from typing import List, Dict

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
REPORTS_FOLDER = os.path.join(PROJECT_ROOT, "reports_final")
IMAGES_FOLDER = os.path.join(REPORTS_FOLDER, "images")

def find_reports() -> list[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤."""
    if not os.path.exists(REPORTS_FOLDER):
        logging.error(f"–ü–∞–ø–∫–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {REPORTS_FOLDER}")
        return []
    
    report_files = [os.path.join(REPORTS_FOLDER, f) for f in os.listdir(REPORTS_FOLDER) if f.endswith("_report.md")]
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(report_files)} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.")
    return report_files

def extract_hpi_from_report(file_path: str) -> tuple[datetime, float] | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∏ –∑–Ω–∞—á–µ–Ω–∏–µ HPI –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞."""
    filename = os.path.basename(file_path)
    date_str = filename.split('_')[0]
    try:
        report_date = datetime.strptime(date_str, '%Y-%m-%d')
    except ValueError:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {filename}")
        return None

    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        match = re.search(r'\|\s*\*\*–ò—Ç–æ–≥–æ–≤—ã–π HPI\*\*\s*\|\s*\*\*(\d+\.\d+)\*\*\s*\|', content)
        if match:
            hpi_value = float(match.group(1))
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ HPI {hpi_value} –≤ –æ—Ç—á–µ—Ç–µ: {filename}")
            return report_date, hpi_value
        else:
            logging.warning(f"–ó–Ω–∞—á–µ–Ω–∏–µ HPI –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç—á–µ—Ç–µ: {filename}")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç—á–µ—Ç–∞ {filename}: {e}", exc_info=True)
        return None

def create_trend_chart(dates: List[datetime], values: List[float], output_path: str) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π HPI."""
    if not dates or not values or len(dates) < 2:
        logging.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏). –ù–∞–π–¥–µ–Ω–æ: {len(dates)}")
        return False

    plt.style.use('dark_background')
    fig, ax = plt.subplots(figsize=(10, 5), dpi=100)

    ax.plot(dates, values, marker='o', markersize=6, linewidth=1.5, color='#FF1493', linestyle='-')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –∏ —Ñ–æ–Ω–∞
    ax.grid(True, linestyle=':', alpha=0.2, color='gray')
    ax.set_facecolor('#1E2D2F')
    fig.patch.set_facecolor('#1E2D2F')

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –æ—Å–∏ X
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
    fig.autofmt_xdate(rotation=45)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Å–∏ Y
    ax.set_ylim(0, 100)
    ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ HPI', fontsize=10, color='white')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
    for date, value in zip(dates, values):
        ax.annotate(f'{value:.1f}', (date, value), textcoords="offset points", xytext=(0, 7), ha='center', color='white')

    ax.set_title('–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ HPI', fontsize=12, pad=15, color='white')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–º–æ–∫
    for spine in ['top', 'right']:
        ax.spines[spine].set_visible(False)
    for spine in ['bottom', 'left']:
        ax.spines[spine].set_color('white')

    plt.tick_params(axis='both', labelsize=8, colors='white')
    
    plt.tight_layout()
    plt.savefig(output_path, bbox_inches='tight', facecolor='#1E2D2F')
    plt.close()
    logging.info(f"–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
    return True

def generate_trend_chart(history_data: List[Dict]) -> str | None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ HPI –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å –¥–∞—Ç–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        logging.info("--- üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ HPI ---")
        
        if not history_data or len(history_data) < 2:
            logging.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
            return None

        # history_data —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ ai_dashboard_injector
        dates = [item['date'] for item in history_data]
        values = [item['hpi'] for item in history_data]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã
        latest_date_str = dates[-1].strftime("%Y-%m-%d")
        output_filename = f"{latest_date_str}_trend.png"
        
        os.makedirs(IMAGES_FOLDER, exist_ok=True)
        output_path = os.path.join(IMAGES_FOLDER, output_filename)
        
        if create_trend_chart(dates, values, output_path):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Markdown
            relative_path = os.path.join(os.path.basename(REPORTS_FOLDER), os.path.basename(IMAGES_FOLDER), output_filename)
            # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –ø—É—Ç–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Markdown/URL
            return relative_path.replace(os.path.sep, '/')
        else:
            return None

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞: {e}", exc_info=True)
        return None

if __name__ == "__main__":
    # –î–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞–ø—Ä—è–º—É—é
    # –°–æ–∑–¥–∞–¥–∏–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    mock_history = [
        {'date': datetime(2024, 1, 1), 'hpi': 65.2, 'scores': {}},
        {'date': datetime(2024, 1, 15), 'hpi': 68.0, 'scores': {}},
        {'date': datetime(2024, 2, 1), 'hpi': 72.5, 'scores': {}},
        {'date': datetime(2024, 2, 20), 'hpi': 71.8, 'scores': {}},
    ]
    generated_path = generate_trend_chart(mock_history)
    if generated_path:
        print(f"–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω: {generated_path}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫.") 