"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ HPI.
"""

import json
import logging
import os
import re
import traceback
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Optional, TypedDict, Union

from ..normalizers import SphereNormalizer
from .pro_data import ProMetric


class MetricsData(TypedDict):
    """–¢–∏–ø –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–∑ JSON."""

    metrics: Dict[str, List[Dict[str, Union[str, float]]]]


class SectionData(TypedDict):
    """–¢–∏–ø –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏."""

    title: str
    content: str
    type: str  # "table" –∏–ª–∏ "text"


@dataclass
class HistoricalScore:
    """–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–π —Å—Ñ–µ—Ä–µ."""

    sphere: str
    date: datetime
    score: float
    emoji: str


@dataclass
class HistoricalReport:
    """–î–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""

    date: datetime
    hpi: float  # –í—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å float, –Ω–µ Optional
    scores: Dict[str, float]
    file_path: str
    metrics: Optional[List[ProMetric]] = None
    problems: Optional[Dict[str, list]] = None
    goals: Optional[Dict[str, list]] = None
    blockers: Optional[Dict[str, list]] = None
    achievements: Optional[Dict[str, list]] = None
    general_notes: Optional[Dict[str, str]] = None


class HistoryParser:
    """–ü–∞—Ä—Å–µ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""

    def __init__(self, reports_dir: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞.

        Args:
            reports_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –æ—Ç—á–µ—Ç–∞–º–∏
        """
        self.reports_dir = reports_dir
        self.logger = logging.getLogger(__name__)
        self.sphere_normalizer = SphereNormalizer()

    def _extract_date_from_filename(self, filename: str) -> Optional[datetime]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.

        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞

        Returns:
            –û–±—ä–µ–∫—Ç datetime –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É
        """
        try:
            # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD_report.md
            date_str: str = filename.split("_")[0]
            return datetime.strptime(date_str, "%Y-%m-%d")
        except (IndexError, ValueError):
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {filename}")
            return None

    def _extract_hpi(self, content: str) -> Optional[float]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ HPI –∏–∑ –æ—Ç—á–µ—Ç–∞.

        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞

        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ HPI –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        pattern: str = (
            r"\|\s*\*\*–ò—Ç–æ–≥–æ–≤—ã–π HPI\*\*\s*\|\s*\*\*(\d+\.\d+)\*\*\s*\|\s*"
            r"[üü°üîµüî¥üü¢]\s*\|"
        )
        match = re.search(pattern, content)
        if match:
            return float(match.group(1))

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã
        pattern = (
            r"\|\s*\*\*–ò—Ç–æ–≥–æ–≤—ã–π HPI\*\*\s*\|\s*(\d+\.\d+)\s*\|\s*" r"[üü°üîµüî¥üü¢]\s*\|"
        )
        match = re.search(pattern, content)
        if match:
            return float(match.group(1))

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
        pattern = r"HPI:\s*(\d+\.\d+)\s*[üü°üîµüî¥üü¢]"
        match = re.search(pattern, content)
        if match:
            return float(match.group(1))

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ
        pattern = (
            r"\|\s*\*\*–ò—Ç–æ–≥–æ–≤—ã–π HPI\*\*\s*\|\s*(\d+\.\d+)\s*\|\s*" r"[üü°üîµüî¥üü¢]\s*\|"
        )
        match = re.search(pattern, content)
        return float(match.group(1)) if match else None

    def _extract_scores(self, content: str) -> Dict[str, float]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Å—Ñ–µ—Ä –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç—á–µ—Ç–∞.

        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å {—Å—Ñ–µ—Ä–∞: –æ—Ü–µ–Ω–∫–∞}
        """
        scores: Dict[str, float] = {}

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫
        pattern: str = r"([üíñüè°ü§ùüíº‚ôÇÔ∏èüß†üé®üí∞])\s+([^:]+):\s+(\d+\.\d+)\s+" r"[üü°üîµüî¥üü¢]"
        matches = re.finditer(pattern, content)

        for match in matches:
            emoji = match.group(1)
            value = float(match.group(3))
            sphere = self.sphere_normalizer.get_sphere_by_emoji(emoji)
            if sphere:
                scores[sphere] = value

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã
        if not scores:
            pattern = r"\|\s*([^|]+)\s*\|\s*(\d+\.\d+)\s*\|\s*" r"[üü°üîµüî¥üü¢]\s*\|"
            matches = re.finditer(pattern, content)

            valid_spheres: List[str] = [
                "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏",
                "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏",
                "–î—Ä—É–∑—å—è",
                "–ö–∞—Ä—å–µ—Ä–∞",
                "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
                "–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
                "–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è",
                "–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ",
            ]

            for match in matches:
                sphere = match.group(1).strip()
                value = float(match.group(2))
                if sphere in valid_spheres:
                    scores[sphere] = value

        return scores

    def _extract_metrics_from_json(self, content: str) -> Optional[List[ProMetric]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ JSON-–±–ª–æ–∫–∞.

        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞

        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ ProMetric –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        json_block_match = re.search(
            r"## üìä –ú–µ—Ç—Ä–∏–∫–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ\n```json\n(.*?)\n```", content, re.DOTALL
        )
        if not json_block_match:
            return None

        try:
            metrics_data: MetricsData = json.loads(json_block_match.group(1))
            metrics: List[ProMetric] = []

            for sphere, sphere_metrics in metrics_data.get("metrics", {}).items():
                for metric_data in sphere_metrics:
                    name = (
                        str(metric_data["name"])
                        if metric_data["name"] is not None
                        else ""
                    )
                    try:
                        current_value = (
                            float(metric_data["current_value"])
                            if metric_data["current_value"] is not None
                            else None
                        )
                    except (ValueError, TypeError):
                        current_value = None
                    try:
                        target_value = (
                            float(metric_data["target_value"])
                            if metric_data["target_value"] is not None
                            else None
                        )
                    except (ValueError, TypeError):
                        target_value = None
                    normalized_name = (
                        str(metric_data["name"]).lower().replace(" ", "_")
                        if metric_data["name"] is not None
                        else ""
                    )
                    metrics.append(
                        ProMetric(
                            sphere=sphere,
                            name=name,
                            current_value=current_value,
                            target_value=target_value,
                            description="",  # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ JSON
                            normalized_name=normalized_name,
                        )
                    )
            return metrics
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON-–±–ª–æ–∫–∞ –º–µ—Ç—Ä–∏–∫: {e}")
            return None

    def _extract_metrics_from_table(self, content: str) -> Optional[List[ProMetric]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.

        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞

        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ ProMetric –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        metric_section_match = re.search(
            r"### üìä –ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏\n\s*((?:\|.*\n)+)", content
        )
        if metric_section_match:
            from .pro_data import ProDataParser

            parser = ProDataParser()
            return parser._parse_metrics_section(metric_section_match.group(1))
        return None

    def _find_section_content(self, content: str, section_name: str) -> Optional[str]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞.

        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞
            section_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞

        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        section_match = re.search(
            rf"### {re.escape(section_name)}\n\s*((?:\|.*\n)+)", content
        )
        if section_match:
            return section_match.group(1)
        return None

    def _parse_regular_section(self, content: str) -> Dict[str, list]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ–±—ã—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª.

        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–∑–∞–≥–æ–ª–æ–≤–æ–∫: —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫}
        """
        from .pro_data import ProDataParser

        parser = ProDataParser()
        return parser._parse_regular_section(content)

    def parse_report(self, file_path: str) -> Optional[HistoricalReport]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç.

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞

        Returns:
            –û–±—ä–µ–∫—Ç HistoricalReport –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            filename = os.path.basename(file_path)
            date = self._extract_date_from_filename(filename)
            if not date:
                return None

            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            hpi = self._extract_hpi(content)
            scores = self._extract_scores(content)
            metrics = self._extract_metrics_from_table(content)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º PRO-—Å–µ–∫—Ü–∏–∏
            problems_content = self._find_section_content(content, "üõë –ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã")
            goals_content = self._find_section_content(content, "üéØ –ú–æ–∏ —Ü–µ–ª–∏")
            blockers_content = self._find_section_content(content, "üöß –ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã")
            achievements_content = self._find_section_content(
                content, "üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
            )

            # –ü–∞—Ä—Å–∏–º PRO-—Å–µ–∫—Ü–∏–∏
            problems = (
                self._parse_regular_section(problems_content)
                if problems_content
                else {}
            )
            goals = self._parse_regular_section(goals_content) if goals_content else {}
            blockers = (
                self._parse_regular_section(blockers_content)
                if blockers_content
                else {}
            )
            achievements = (
                self._parse_regular_section(achievements_content)
                if achievements_content
                else {}
            )

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç—á–µ—Ç–∞
            return HistoricalReport(
                file_path=file_path,
                date=date,
                hpi=hpi if hpi is not None else 0.0,
                scores=scores,
                metrics=metrics,
                problems=problems,
                goals=goals,
                blockers=blockers,
                achievements=achievements,
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç—á–µ—Ç–∞ {file_path}: {e}")
            self.logger.error(traceback.format_exc())
            return None

    def get_history(self) -> List[HistoricalReport]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤.

        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ HistoricalReport, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –¥–∞—Ç–µ
        """
        history: List[HistoricalReport] = []

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
            report_files = [
                f for f in os.listdir(self.reports_dir) if f.endswith("_report.md")
            ]

            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –æ—Ç—á–µ—Ç
            for filename in report_files:
                file_path = os.path.join(self.reports_dir, filename)
                report = self.parse_report(file_path)
                if report:
                    history.append(report)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            history.sort(key=lambda x: x.date)

        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}\n{traceback.format_exc()}"
            )

        return history

    def get_sphere_history(self, sphere: str) -> List[HistoricalScore]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ü–µ–Ω–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ñ–µ—Ä—ã.

        Args:
            sphere: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã

        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ HistoricalScore
        """
        history = []
        emoji = self.sphere_normalizer.get_emoji_by_sphere(sphere)

        if not emoji:
            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ñ–µ—Ä–∞: {sphere}")
            return []

        for report in self.get_history():
            score = report.scores.get(sphere)
            if score is not None:
                history.append(
                    HistoricalScore(
                        sphere=sphere, date=report.date, score=score, emoji=emoji
                    )
                )

        return history

    def parse(self) -> List[HistoricalReport]:
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        return self.get_history()
