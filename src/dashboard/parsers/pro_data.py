"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ PRO-—Å–µ–∫—Ü–∏–π –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –æ—Ç—á–µ—Ç–æ–≤ HPI.
"""
import re
import logging
from typing import Dict, List, Optional
from dataclasses import dataclass
from ..normalizers import MetricNormalizer, SphereNormalizer


@dataclass
class ProMetric:
    """–ú–µ—Ç—Ä–∏–∫–∞ –∏–∑ PRO-—Å–µ–∫—Ü–∏–∏."""
    sphere: str
    name: str
    current_value: Optional[float]
    target_value: Optional[float]
    description: str
    normalized_name: str


@dataclass
class ProData:
    """–î–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö PRO-—Å–µ–∫—Ü–∏–π."""
    scores: Dict[str, float]  # {—Å—Ñ–µ—Ä–∞: –æ—Ü–µ–Ω–∫–∞}
    metrics: List[ProMetric]  # –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫
    problems: Dict[str, List[str]]  # {—Å—Ñ–µ—Ä–∞: [–ø—Ä–æ–±–ª–µ–º–∞1, –ø—Ä–æ–±–ª–µ–º–∞2, ...]}
    goals: Dict[str, List[str]]  # {—Å—Ñ–µ—Ä–∞: [—Ü–µ–ª—å1, —Ü–µ–ª—å2, ...]}
    blockers: Dict[str, List[str]]  # {—Å—Ñ–µ—Ä–∞: [–±–ª–æ–∫–µ—Ä1, –±–ª–æ–∫–µ—Ä2, ...]}
    achievements: Dict[str, List[str]]  # {—Å—Ñ–µ—Ä–∞: [–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ1, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ2, ...]}
    general_notes: Dict[str, str]  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤


class ProDataParser:
    """–ü–∞—Ä—Å–µ—Ä PRO-—Å–µ–∫—Ü–∏–π –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –æ—Ç—á–µ—Ç–æ–≤."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞."""
        self.sphere_normalizer = SphereNormalizer()
        self.metric_normalizer = MetricNormalizer()
        self.logger = logging.getLogger(__name__)

        # –ù–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö PRO-—Å–µ–∫—Ü–∏–π
        self.pro_sections = [
            'üõë –ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã',
            'üéØ –ú–æ–∏ —Ü–µ–ª–∏',
            'üöß –ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã',
            'üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
            'üìä –ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏',
            'üìù –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã'  # –ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è
        ]

    def _find_section_content(self, content: str, section_title: str) -> Optional[str]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ.
        
        Args:
            content: –í–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
            section_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å–∫–æ–º–æ–π —Å–µ–∫—Ü–∏–∏
            
        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏ –∏–ª–∏ None, –µ—Å–ª–∏ —Å–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        clean_title = re.sub(r'^\s*[\U0001F000-\U0001FAFF\s]+', '', section_title).strip()
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å –¥–≤—É–º—è –∏–ª–∏ —Ç—Ä–µ–º—è —Ä–µ—à–µ—Ç–∫–∞–º–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —ç–º–æ–¥–∑–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        pattern = rf"(?:##|###)\s*[\U0001F000-\U0001FAFF\s]*{re.escape(clean_title)}(.*?)(?=(?:##|###)|$)"
        match = re.search(pattern, content, re.DOTALL | re.IGNORECASE)
        return match.group(1).strip() if match else None

    def _parse_table_rows(self, table_content: str) -> List[List[str]]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π.
        
        Args:
            table_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        """
        rows = []
        if not table_content:
            return rows
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
        lines = [line.strip() for line in table_content.splitlines() if line.strip()]
        
        for line in lines:
            if line.startswith('|'):
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ | –∏ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                cells = [cell.strip() for cell in line.split('|') if cell.strip()]
                if cells and not any('---' in cell for cell in cells):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    rows.append(cells)
                    
        return rows

    def _parse_metrics_section(self, content: str) -> List[ProMetric]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å–µ–∫—Ü–∏—é –º–µ—Ç—Ä–∏–∫.
        
        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ ProMetric
        """
        metrics = []
        rows = self._parse_table_rows(content)
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã, –Ω–∞—á–∏–Ω–∞—è —Å 1-–π —Å—Ç—Ä–æ–∫–∏
        for row in rows[1:]:
            if len(row) >= 4:
                sphere_candidate = row[0]
                metric_name = row[1]
                current_value = row[2]
                target_value = row[3]
                description = row[4] if len(row) > 4 else ""
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ñ–µ—Ä—É –ø–æ —ç–º–æ–¥–∑–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                current_sphere = None
                for emoji, sphere in self.sphere_normalizer.get_all_emojis().items():
                    if emoji in sphere_candidate:
                        current_sphere = sphere
                        break
                if not current_sphere:
                    current_sphere = self.sphere_normalizer.normalize(sphere_candidate)
                # –í—Å–µ–≥–¥–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º!
                if current_sphere:
                    current_sphere = self.sphere_normalizer.normalize(current_sphere)
                    try:
                        current_float = float(current_value) if current_value else None
                        target_float = float(target_value) if target_value else None
                    except ValueError:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ '{metric_name}' –≤ —á–∏—Å–ª–∞")
                        current_float = None
                        target_float = None
                    metrics.append(
                        ProMetric(
                            sphere=current_sphere,
                            name=metric_name,
                            current_value=current_float,
                            target_value=target_float,
                            description=description,
                            normalized_name=self.metric_normalizer.normalize(metric_name)
                        )
                    )
        return metrics

    def _parse_regular_section(self, content: str) -> Dict[str, List[str]]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ–±—ã—á–Ω—É—é —Å–µ–∫—Ü–∏—é (–ø—Ä–æ–±–ª–µ–º—ã, —Ü–µ–ª–∏, –±–ª–æ–∫–µ—Ä—ã, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è).
        
        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å {—Å—Ñ–µ—Ä–∞: [–∑–Ω–∞—á–µ–Ω–∏–µ1, –∑–Ω–∞—á–µ–Ω–∏–µ2, ...]}
        """
        section_data = {}
        rows = self._parse_table_rows(content)
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã, –Ω–∞—á–∏–Ω–∞—è —Å 1-–π —Å—Ç—Ä–æ–∫–∏
        for row in rows[1:]:
            if len(row) >= 2:
                sphere_candidate = row[0]
                value = row[1]
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ñ–µ—Ä—É
                current_sphere = None
                for emoji, sphere in self.sphere_normalizer.get_all_emojis().items():
                    if emoji in sphere_candidate:
                        current_sphere = sphere
                        break
                if not current_sphere:
                    current_sphere = self.sphere_normalizer.normalize(sphere_candidate)
                # –í—Å–µ–≥–¥–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º!
                if current_sphere:
                    normalized_sphere = self.sphere_normalizer.normalize(current_sphere)
                    if normalized_sphere not in section_data:
                        section_data[normalized_sphere] = []
                    section_data[normalized_sphere].append(value)
        return section_data

    def _parse_general_notes_section(self, content: str) -> Dict[str, str]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å–µ–∫—Ü–∏—é –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤/–∑–∞–º–µ—Ç–æ–∫.
        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏
        Returns:
            –°–ª–æ–≤–∞—Ä—å {–≤–æ–ø—Ä–æ—Å: –æ—Ç–≤–µ—Ç}
        """
        notes = {}
        rows = self._parse_table_rows(content)
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã, –Ω–∞—á–∏–Ω–∞—è —Å 1-–π —Å—Ç—Ä–æ–∫–∏
        for row in rows[1:]:
            if len(row) >= 2:
                question = row[0]
                answer = row[1]
                notes[question] = answer
        return notes

    def parse(self, content: str) -> ProData:
        """
        –ü–∞—Ä—Å–∏—Ç –≤—Å–µ PRO-—Å–µ–∫—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
        
        Args:
            content: –¢–µ–∫—Å—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        
        Returns:
            –û–±—ä–µ–∫—Ç ProData —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π
        """
        sections_data = {
            'problems': {},
            'goals': {},
            'blockers': {},
            'achievements': {},
            'metrics': [],
            'scores': {},
            'general_notes': {}  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
        }
        self.logger.debug("[DEBUG] --- –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ PRO-—Å–µ–∫—Ü–∏–π ---")
        # –Ø–≤–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π —Å –∫–ª—é—á–∞–º–∏
        section_map = {
            'üõë –ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã': 'problems',
            'üéØ –ú–æ–∏ —Ü–µ–ª–∏': 'goals',
            'üöß –ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã': 'blockers',
            'üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è': 'achievements'
        }
        # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é
        for section_title in self.pro_sections:
            section_content = self._find_section_content(content, section_title)
            if not section_content:
                self.logger.debug(f"–°–µ–∫—Ü–∏—è '{section_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ")
                continue
            self.logger.debug(f"–ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è '{section_title}', —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(section_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            if section_title == 'üìä –ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏':
                metrics = self._parse_metrics_section(section_content)
                self.logger.debug(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ {len(metrics)} –º–µ—Ç—Ä–∏–∫: {metrics}")
                sections_data['metrics'] = metrics
            elif section_title == 'üìù –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã':
                sections_data['general_notes'] = self._parse_general_notes_section(section_content)
                self.logger.debug(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω—ã –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: {sections_data['general_notes']}")
            elif section_title in section_map:
                section_key = section_map[section_title]
                section_data = self._parse_regular_section(section_content)
                self.logger.debug(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–∞ —Å–µ–∫—Ü–∏—è '{section_title}', –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(section_data)} —Å—Ñ–µ—Ä: {section_data}")
                sections_data[section_key] = section_data
        self.logger.debug(f"[DEBUG] –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {sections_data}")
        self.logger.debug("[DEBUG] --- –ö–æ–Ω–µ—Ü –ø–∞—Ä—Å–∏–Ω–≥–∞ PRO-—Å–µ–∫—Ü–∏–π ---")
        return ProData(
            scores=sections_data['scores'],
            metrics=sections_data['metrics'],
            problems=sections_data['problems'],
            goals=sections_data['goals'],
            blockers=sections_data['blockers'],
            achievements=sections_data['achievements'],
            general_notes=sections_data['general_notes']
        ) 