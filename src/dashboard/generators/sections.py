"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ü–∏–π –æ—Ç—á–µ—Ç–∞ HPI.
"""

import logging
from dataclasses import dataclass
from typing import Dict, List, Optional, TypedDict, Union

from ..normalizers import MetricNormalizer, SphereNormalizer
from ..parsers import HistoricalReport, ProMetric
from .recommendations import Recommendation


class LogMessage(TypedDict):
    """–¢–∏–ø –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""

    message: str
    data: Dict[str, Union[str, float, None]]


@dataclass
class MetricProgress:
    """–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–µ—Ç—Ä–∏–∫–µ."""

    name: str
    current_value: float
    previous_value: Optional[float]
    target_value: float
    change_percent: float
    status: str  # "improved", "declined", "stable"
    unit: str


@dataclass
class SphereSection:
    """–°–µ–∫—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ñ–µ—Ä—ã."""

    name: str
    emoji: str
    current_score: float
    previous_score: Optional[float]
    change_percent: float
    status: str  # "improved", "declined", "stable"
    metrics: List[MetricProgress]
    problems: List[str]
    goals: List[str]
    blockers: List[str]
    recommendation: Optional[Recommendation]


@dataclass
class AIRecommendationsSection:
    """–°–µ–∫—Ü–∏—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞."""

    name: str = "AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
    emoji: str = "ü§ñ"
    recommendations: Optional[Dict[str, Recommendation]] = None
    problems: Optional[List[str]] = None  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–º
    goals: Optional[List[str]] = None
    blockers: Optional[List[str]] = None
    error: Optional[str] = None  # –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å

    def __post_init__(self):
        if self.problems is None:
            self.problems = []
        if self.goals is None:
            self.goals = []
        if self.blockers is None:
            self.blockers = []
        if self.recommendations is None:
            self.recommendations = {}


class SectionGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ–∫—Ü–∏–π –æ—Ç—á–µ—Ç–∞."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞."""
        self.sphere_normalizer = SphereNormalizer()
        self.metric_normalizer = MetricNormalizer()
        self.logger = logging.getLogger(__name__)

    def _calculate_change_percent(
        self, current: float, previous: Optional[float]
    ) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.

        Args:
            current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            previous: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        Returns:
            –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        if previous is None:
            return 0.0
        if previous == 0:
            return 100.0 if current > 0 else 0.0
        return ((current - previous) / abs(previous)) * 100

    def _determine_status(self, change_percent: float, threshold: float = 5.0) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è.

        Args:
            change_percent: –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
            threshold: –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

        Returns:
            –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        if abs(change_percent) < threshold:
            return "stable"
        return "improved" if change_percent > 0 else "declined"

    def _generate_metric_progress(
        self,
        metric: ProMetric,
        current_report: HistoricalReport,
        previous_report: Optional[HistoricalReport],
    ) -> MetricProgress:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–µ—Ç—Ä–∏–∫–µ.

        Args:
            metric: –û–±—ä–µ–∫—Ç ProMetric –∏–∑ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            current_report: –¢–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç
            previous_report: –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—á–µ—Ç

        Returns:
            –û–±—ä–µ–∫—Ç MetricProgress
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é normalized_name –∏ —Å—Ñ–µ—Ä—ã
        previous_value: Optional[float] = None
        if previous_report and previous_report.metrics:
            for prev_metric in previous_report.metrics:
                if metric.name == prev_metric.name:
                    metric.previous_value = prev_metric.current_value
                    # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    change_percent = self._calculate_change_percent(
                        metric.current_value or 0.0, metric.previous_value or 0.0
                    )
                    break
            if not previous_value:
                self.logger.warning(
                    f"[NO MATCH] –î–ª—è –º–µ—Ç—Ä–∏–∫–∏ {metric.normalized_name} "
                    f"({metric.sphere}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç—á–µ—Ç–µ!"
                )
        change_percent = self._calculate_change_percent(
            metric.current_value or 0.0, previous_value or 0.0
        )
        return MetricProgress(
            name=metric.name,
            current_value=metric.current_value or 0.0,
            previous_value=previous_value,
            target_value=metric.target_value or 0.0,
            change_percent=change_percent,
            status=self._determine_status(change_percent),
            unit=metric.unit or "",
        )

    def generate(
        self,
        history: List[HistoricalReport],
        recommendations: Dict[str, Recommendation],
    ) -> Dict[str, SphereSection]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ñ–µ—Ä.

        Args:
            history: –ò—Å—Ç–æ—Ä–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –¥–∞—Ç–µ)
            recommendations: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ñ–µ—Ä–∞–º

        Returns:
            –°–ª–æ–≤–∞—Ä—å {—Å—Ñ–µ—Ä–∞: —Å–µ–∫—Ü–∏—è}
        """
        sections: Dict[str, SphereSection] = {}
        if not history:
            self.logger.error("–ò—Å—Ç–æ—Ä–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø—É—Å—Ç–∞!")
            return sections

        current_report = history[-1]
        previous_report = history[-2] if len(history) > 1 else None

        self.logger.info(
            f"[REPORT_COMPARE] –¢–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç: {current_report.file_path}, "
            f"–¥–∞—Ç–∞: {current_report.date}"
        )
        if previous_report:
            self.logger.info(
                f"[REPORT_COMPARE] –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—á–µ—Ç: {previous_report.file_path}, "
                f"–¥–∞—Ç–∞: {previous_report.date}"
            )
        else:
            self.logger.warning("[REPORT_COMPARE] –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        # –ü–æ–ª—É—á–∞–µ–º master_order —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ñ–µ—Ä
        master_order: List[str] = [
            self.sphere_normalizer.normalize("–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏"),
            self.sphere_normalizer.normalize("–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏"),
            self.sphere_normalizer.normalize("–î—Ä—É–∑—å—è"),
            self.sphere_normalizer.normalize("–ö–∞—Ä—å–µ—Ä–∞"),
            self.sphere_normalizer.normalize("–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ"),
            self.sphere_normalizer.normalize("–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ"),
            self.sphere_normalizer.normalize("–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è"),
            self.sphere_normalizer.normalize("–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ"),
        ]

        # DEBUG: –≤—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–±–ª–µ–º/—Ü–µ–ª–µ–π/–±–ª–æ–∫–µ—Ä–æ–≤
        self.logger.info(
            "[DEBUG] current_report.problems: %s",
            getattr(current_report, "problems", {}),
        )
        self.logger.info(
            "[DEBUG] current_report.goals: %s",
            getattr(current_report, "goals", {}),
        )
        self.logger.info(
            "[DEBUG] current_report.blockers: %s",
            getattr(current_report, "blockers", {}),
        )

        if previous_report and previous_report.metrics:
            self.logger.info("[DEBUG] previous_report.metrics:")
            for m in previous_report.metrics:
                self.logger.info(
                    f"  - {m.normalized_name} | {m.sphere} | {m.current_value}"
                )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã –∏–∑ master_order
        for sphere in master_order:
            normalized = self.sphere_normalizer.normalize(sphere)
            emoji = self.sphere_normalizer.get_emoji(normalized)
            current_score = 0.0
            if current_report.scores and normalized in current_report.scores:
                current_score = current_report.scores[normalized]

            previous_score = None
            if previous_report and normalized in previous_report.scores:
                previous_score = previous_report.scores[normalized]

            change_percent = self._calculate_change_percent(
                current_score, previous_score
            )

            # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ
            sphere_metrics: List[MetricProgress] = []
            if current_report.metrics:
                for metric in current_report.metrics:
                    if metric.sphere == normalized:
                        self.logger.info(
                            f"[DEBUG] –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏: {metric.normalized_name} | "
                            f"{metric.sphere} | {metric.current_value}"
                        )
                        sphere_metrics.append(
                            self._generate_metric_progress(
                                metric, current_report, previous_report
                            )
                        )

            problems = getattr(current_report, "problems", {}).get(normalized, [])
            goals = getattr(current_report, "goals", {}).get(normalized, [])
            blockers = getattr(current_report, "blockers", {}).get(normalized, [])

            sections[normalized] = SphereSection(
                name=normalized,
                emoji=emoji,
                current_score=current_score,
                previous_score=previous_score,
                change_percent=change_percent,
                status=self._determine_status(change_percent),
                metrics=sphere_metrics,
                problems=problems,
                goals=goals,
                blockers=blockers,
                recommendation=recommendations.get(sphere),
            )
        return sections
