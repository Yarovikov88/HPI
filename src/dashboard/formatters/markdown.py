"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ HPI –≤ Markdown.
"""

import json
import logging
import os
from datetime import datetime
from typing import Dict, List, Optional, Tuple

from ..generators import ActionStep, Evidence, MetricProgress, SphereSection


class MarkdownFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Markdown-–æ—Ç—á–µ—Ç–æ–≤."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞."""
        self.logger = logging.getLogger(__name__)

    def _format_header(self, date: datetime, version: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞.

        Args:
            date: –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
            version: –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        return f"""# –û—Ç—á–µ—Ç HPI
*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {date.strftime('%d.%m.%Y %H:%M')} ‚Ä¢ –í–µ—Ä—Å–∏—è {version}*

---
"""

    def _format_metric_progress(self, metric: MetricProgress) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–µ—Ç—Ä–∏–∫–µ.

        Args:
            metric: –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –º–µ—Ç—Ä–∏–∫–∏

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –º–µ—Ç—Ä–∏–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        status_emoji: str = {"improved": "üìà", "declined": "üìâ", "stable": "üìä"}.get(
            metric.status, "üìä"
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        change_str: str = ""
        if metric.previous_value is not None:
            sign = "+" if metric.change_percent > 0 else ""
            change_str = f" ({sign}{metric.change_percent:.1f}%)"

        return (
            f"- {status_emoji} **{metric.name}**: "
            f"{metric.current_value:.1f} ‚Üí {metric.target_value:.1f}{change_str}"
        )

    def _format_action_steps(self, steps: List[ActionStep]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —à–∞–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

        Args:
            steps: –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —à–∞–≥–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        if not steps:
            return ""

        result: List[str] = ["### –®–∞–≥–∏ –∫ —É–ª—É—á—à–µ–Ω–∏—é\n"]
        for i, step in enumerate(steps, 1):
            impact = "‚≠ê" * round(step.expected_impact * 5)
            result.append(f"{i}. {step.description}")
            result.append(f"   - –û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç: {impact}")
            result.append(f"   - –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: {step.estimated_time}")
            if step.dependencies:
                deps = ", ".join(step.dependencies)
                result.append(f"   - –¢—Ä–µ–±—É–µ—Ç—Å—è: {deps}")
            result.append("")

        return "\n".join(result)

    def _format_evidence(self, evidence: Evidence) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é –±–∞–∑—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

        Args:
            evidence: –û–±—ä–µ–∫—Ç —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –±–∞–∑–æ–π

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        if not evidence:
            return ""

        result: List[str] = ["### –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ\n"]

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        if evidence.data_points:
            result.append("**–ù–∞–±–ª—é–¥–µ–Ω–∏—è:**")
            for point in evidence.data_points:
                result.append(f"- {point}")
            result.append("")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        if evidence.correlations:
            result.append("**–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:**")
            for corr in evidence.correlations:
                result.append(f"- {corr}")
            result.append("")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö
        if evidence.historical_success:
            success_percent = evidence.historical_success * 100
            result.append(f"**–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö:** {success_percent:.1f}%\n")

        return "\n".join(result)

    def _format_sphere_section(self, section: SphereSection) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é –¥–ª—è —Å—Ñ–µ—Ä—ã.

        Args:
            section: –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ–∫—Ü–∏–∏

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Å–µ–∫—Ü–∏–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏ –∏ –æ—Ü–µ–Ω–∫–æ–π
        result: List[str] = [f"## {section.emoji} {section.name}"]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ—Ü–µ–Ω–∫—É –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        score_line = f"**–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞:** {section.current_score:.1f}"
        if section.previous_score is not None:
            sign = "+" if section.change_percent > 0 else ""
            score_line += f" ({sign}{section.change_percent:.1f}%)"
        result.append(score_line + "\n")

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if section.metrics:
            result.append("### –ú–µ—Ç—Ä–∏–∫–∏")
            for metric in section.metrics:
                result.append(self._format_metric_progress(metric))
            result.append("")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        if section.problems:
            result.append("### –ü—Ä–æ–±–ª–µ–º—ã")
            for problem in section.problems:
                result.append(f"- {problem}")
            result.append("")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–∏
        if section.goals:
            result.append("### –¶–µ–ª–∏")
            for goal in section.goals:
                result.append(f"- {goal}")
            result.append("")

        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–µ—Ä—ã
        if section.blockers:
            result.append("### –ë–ª–æ–∫–µ—Ä—ã")
            for blocker in section.blockers:
                result.append(f"- {blocker}")
            result.append("")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        if section.recommendation:
            result.append("### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")
            rec = section.recommendation
            if isinstance(rec, list):
                for r in rec:
                    result.append(f"- {str(r)}")
            elif isinstance(rec, str):
                result.append(f"- {rec}")
            elif hasattr(rec, "title") and hasattr(rec, "description"):
                result.append(f"**{rec.title}**")
                result.append(f"\n{rec.description}\n")
                # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π
                if hasattr(rec, "action_steps"):
                    result.append(self._format_action_steps(rec.action_steps))
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é –±–∞–∑—É
                if hasattr(rec, "evidence"):
                    result.append(self._format_evidence(rec.evidence))
            else:
                result.append(f"- {str(rec)}")

        return "\n".join(result)

    def _format_metrics_json(self, sections: Dict[str, SphereSection]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ JSON-–±–ª–æ–∫.

        Args:
            sections: –°–ª–æ–≤–∞—Ä—å —Å —Å–µ–∫—Ü–∏—è–º–∏ –ø–æ —Å—Ñ–µ—Ä–∞–º

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å JSON-–±–ª–æ–∫–æ–º –º–µ—Ç—Ä–∏–∫
        """
        metrics_data: Dict[str, Dict] = {"metrics": {}, "comparison": {}}

        for sphere_name, section in sections.items():
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if section.metrics:
                metrics_data["metrics"][sphere_name] = []
                for metric in section.metrics:
                    metric_data = {
                        "name": metric.name,
                        "current_value": metric.current_value,
                        "target_value": metric.target_value,
                        "previous_value": metric.previous_value,
                        "change_percent": metric.change_percent,
                        "status": metric.status,
                    }
                    metrics_data["metrics"][sphere_name].append(metric_data)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            metrics_data["comparison"][sphere_name] = {
                "current_score": section.current_score,
                "previous_score": section.previous_score,
                "change_percent": section.change_percent,
            }

        return (
            f"\n```json\n"
            f"{json.dumps(metrics_data, indent=2, ensure_ascii=False)}\n"
            f"```\n"
        )

    def format_report(
        self,
        sections: Dict[str, SphereSection],
        history: List[Dict],
        date: datetime,
        version: str,
    ) -> str:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ –æ—Ç—á–µ—Ç–∞.

        Args:
            sections: –°–ª–æ–≤–∞—Ä—å —Å —Å–µ–∫—Ü–∏—è–º–∏ –ø–æ —Å—Ñ–µ—Ä–∞–º
            history: –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π HPI
            date: –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
            version: –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –ø–æ–ª–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        report: str = self._format_header(date, version)

        # –î–æ–±–∞–≤–ª—è–µ–º HPI –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
        report += self._format_hpi_section(history)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
        for section in sections.values():
            report += self._format_sphere_section(section)
            report += "\n---\n"

        # –î–æ–±–∞–≤–ª—è–µ–º JSON-–±–ª–æ–∫ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        report += self._format_metrics_json(sections)

        return report

    def _get_latest_diagrams(self, path: str) -> Tuple[Optional[str], Optional[str]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã –¥–∏–∞–≥—Ä–∞–º–º (—Ä–∞–¥–∞—Ä –∏ —Ç—Ä–µ–Ω–¥) –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
        """
        files = os.listdir(path)
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        radar_files = [f for f in files if f.endswith("_radar.png")]
        trend_files = [f for f in files if f.endswith("_trend.png")]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ (YYYY-MM-DD)
        latest_radar = sorted(radar_files, reverse=True)[0] if radar_files else None
        latest_trend = sorted(trend_files, reverse=True)[0] if trend_files else None

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è Markdown
        radar_path = os.path.join(path, latest_radar) if latest_radar else None
        trend_path = os.path.join(path, latest_trend) if latest_trend else None

        # –ó–∞–º–µ–Ω—è–µ–º –±—ç–∫—Å–ª—ç—à–∏ –Ω–∞ —Å–ª—ç—à–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ Markdown
        if radar_path:
            radar_path = radar_path.replace("\\\\", "/")
        if trend_path:
            trend_path = trend_path.replace("\\\\", "/")

        return trend_path, radar_path

    def _format_hpi_section(self, history: List[Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é —Å –æ–±—â–∏–º HPI, –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏ –∏ —Ç–∞–±–ª–∏—Ü–µ–π –±–∞–ª–∞–Ω—Å–∞.
        """
        if not history:
            return ""

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π HPI
        latest = history[-1]
        latest_hpi = latest["hpi"]
        status_emoji = (
            "üü¢"
            if latest_hpi >= 85
            else "üîµ" if latest_hpi >= 70 else "üü°" if latest_hpi >= 55 else "üî¥"
        )

        result: List[str] = [
            f"## Human Performance Index: {latest_hpi:.1f} {status_emoji}\n"
        ]

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ –¥–∏–∞–≥—Ä–∞–º–º–∞–º
        trend_path, radar_path = self._get_latest_diagrams("reports_final/images")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        result.append("> [!note]- üìà –î–∏–Ω–∞–º–∏–∫–∞ HPI")
        if trend_path:
            result.append(f"> ![{trend_path}]({trend_path})")
        result.append(">\n")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–¥–∞—Ä –∏ —Ç–∞–±–ª–∏—Ü—É –±–∞–ª–∞–Ω—Å–∞
        result.append("> [!note]- ‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –ø–æ —Å—Ñ–µ—Ä–∞–º")
        if radar_path:
            result.append(f"> ![{radar_path}]({radar_path})")
        result.append(">")
        result.append("> | –î–∞—Ç–∞ | üíñ | üè° | ü§ù | üíº | ‚ôÇÔ∏è | üß† | üé® | üí∞ |")
        result.append("> |:---|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|")

        # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for report in reversed(history):
            date_str = report["date"].strftime("%Y-%m-%d")
            scores = [
                report["scores"].get("–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏", 0.0),
                report["scores"].get("–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏", 0.0),
                report["scores"].get("–î—Ä—É–∑—å—è", 0.0),
                report["scores"].get("–ö–∞—Ä—å–µ—Ä–∞", 0.0),
                report["scores"].get("–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", 0.0),
                report["scores"].get("–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", 0.0),
                report["scores"].get("–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è", 0.0),
                report["scores"].get("–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ", 0.0),
            ]
            scores_str = " | ".join([f"{s:.1f}" for s in scores])
            result.append(f"> | {date_str} | {scores_str} |")

        result.append("\n---\n")

        return "\n".join(result)
