"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ HPI –≤ Markdown.
"""
import os
import logging
from typing import Dict, List, Optional
from datetime import datetime
import re

from ..generators import SphereSection, MetricProgress, Recommendation
from ...trend import generate_trend_chart
from ..normalizers import SphereNormalizer
from ..generators.sections import SphereSection


class MarkdownFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Markdown-–æ—Ç—á–µ—Ç–æ–≤."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞."""
        self.logger = logging.getLogger(__name__)

    def _format_header(
        self,
        date: datetime,
        version: str
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞.
        
        Args:
            date: –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
            version: –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        return f"""# –û—Ç—á–µ—Ç HPI
*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {date.strftime('%d.%m.%Y %H:%M')} ‚Ä¢ –í–µ—Ä—Å–∏—è {version}*

---
"""

    def _format_metric_progress(
        self,
        metric: MetricProgress
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–µ—Ç—Ä–∏–∫–µ.
        
        Args:
            metric: –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –º–µ—Ç—Ä–∏–∫–∏
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –º–µ—Ç—Ä–∏–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = {
            "improved": "üìà",
            "declined": "üìâ",
            "stable": "üìä"
        }.get(metric.status, "üìä")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        change_str = ""
        if metric.previous_value is not None:
            sign = "+" if metric.change_percent > 0 else ""
            change_str = f" ({sign}{metric.change_percent:.1f}%)"
            
        return f"""- {status_emoji} **{metric.name}**: {metric.current_value:.1f} ‚Üí {metric.target_value:.1f}{change_str}"""

    def _format_action_steps(
        self,
        steps: List
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —à–∞–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
        
        Args:
            steps: –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —à–∞–≥–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        if not steps:
            return ""
            
        result = ["### –®–∞–≥–∏ –∫ —É–ª—É—á—à–µ–Ω–∏—é\n"]
        for i, step in enumerate(steps, 1):
            impact = "‚≠ê" * round(step.expected_impact * 5)
            result.append(f"{i}. {step.description}")
            result.append(f"   - –û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç: {impact}")
            result.append(f"   - –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: {step.estimated_time}")
            if step.dependencies:
                deps = ", ".join(step.dependencies)
                result.append(f"   - –¢—Ä–µ–±—É–µ—Ç—Å—è: {deps}")
            result.append("")
            
        return "\n".join(result)

    def _format_evidence(
        self,
        evidence
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é –±–∞–∑—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
        
        Args:
            evidence: –û–±—ä–µ–∫—Ç —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –±–∞–∑–æ–π
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        if not evidence:
            return ""
            
        result = ["### –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ\n"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        if evidence.data_points:
            result.append("**–ù–∞–±–ª—é–¥–µ–Ω–∏—è:**")
            for point in evidence.data_points:
                result.append(f"- {point}")
            result.append("")
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        if evidence.correlations:
            result.append("**–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:**")
            for corr in evidence.correlations:
                result.append(f"- {corr}")
            result.append("")
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö
        if evidence.historical_success:
            success_percent = evidence.historical_success * 100
            result.append(f"**–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö:** {success_percent:.1f}%\n")
            
        return "\n".join(result)

    def _format_sphere_section(
        self,
        section: SphereSection
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é –¥–ª—è —Å—Ñ–µ—Ä—ã.
        
        Args:
            section: –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ–∫—Ü–∏–∏
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Å–µ–∫—Ü–∏–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏ –∏ –æ—Ü–µ–Ω–∫–æ–π
        result = [f"## {section.emoji} {section.name}"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ—Ü–µ–Ω–∫—É –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        score_line = f"**–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞:** {section.current_score:.1f}"
        if section.previous_score is not None:
            sign = "+" if section.change_percent > 0 else ""
            score_line += f" ({sign}{section.change_percent:.1f}%)"
        result.append(score_line + "\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if section.metrics:
            result.append("### –ú–µ—Ç—Ä–∏–∫–∏")
            for metric in section.metrics:
                result.append(self._format_metric_progress(metric))
            result.append("")
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        if section.problems:
            result.append("### –ü—Ä–æ–±–ª–µ–º—ã")
            for problem in section.problems:
                result.append(f"- {problem}")
            result.append("")
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–∏
        if section.goals:
            result.append("### –¶–µ–ª–∏")
            for goal in section.goals:
                result.append(f"- {goal}")
            result.append("")
            
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–µ—Ä—ã
        if section.blockers:
            result.append("### –ë–ª–æ–∫–µ—Ä—ã")
            for blocker in section.blockers:
                result.append(f"- {blocker}")
            result.append("")
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        if section.recommendation:
            result.append("### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")
            rec = section.recommendation
            if isinstance(rec, list):
                for r in rec:
                    result.append(f"- {str(r)}")
            elif isinstance(rec, str):
                result.append(f"- {rec}")
            elif hasattr(rec, 'title') and hasattr(rec, 'description'):
                result.append(f"**{rec.title}**")
                result.append(f"\n{rec.description}\n")
                # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π
                if hasattr(rec, 'action_steps'):
                    result.append(self._format_action_steps(rec.action_steps))
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é –±–∞–∑—É
                if hasattr(rec, 'evidence'):
                    result.append(self._format_evidence(rec.evidence))
            else:
                result.append(f"- {str(rec)}")
            
        return "\n".join(result)

    def format_report(
        self,
        sections: Dict[str, SphereSection],
        date: datetime,
        version: str
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç.
        
        Args:
            sections: –°–ª–æ–≤–∞—Ä—å —Å —Å–µ–∫—Ü–∏—è–º–∏ –æ—Ç—á–µ—Ç–∞
            date: –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
            version: –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –ø–æ–ª–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        result = [self._format_header(date, version)]
        
        # –£–¥–∞–ª—è–µ–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ (–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ)
        # result.append("## –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n")
        # for section in sections.values():
        #     result.append(f"- [{section.emoji} {section.name}](#{section.name.lower().replace(' ', '-')})")
        # result.append("\n---\n")
        result.append("\n---\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏
        for section in sections.values():
            result.append(self._format_sphere_section(section))
            result.append("\n---\n")
            
        return "\n".join(result)

    def format_dashboard(
        self,
        sections: Dict[str, SphereSection],
        history: List[Dict],
        date: datetime,
        version: str,
        openai_error: Optional[str] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—à–±–æ—Ä–¥ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
        
        Args:
            sections: –°–ª–æ–≤–∞—Ä—å —Å —Å–µ–∫—Ü–∏—è–º–∏ –¥–∞—à–±–æ—Ä–¥–∞
            history: –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π HPI
            date: –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            version: –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã
            openai_error: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ OpenAI
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—à–±–æ—Ä–¥–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        result = []
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã sections
        # result.append("> [!note]- DEBUG: sections keys/types: " + ", ".join([f"{k}: {type(v)}" for k, v in sections.items()]))
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ SphereSection –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–±–ª–µ–º –∏ —Ç.–¥.
        sphere_sections = [s for s in sections.values() if isinstance(s, SphereSection)]
        has_problems = any(s.problems for s in sphere_sections)
        has_goals = any(s.goals for s in sphere_sections)
        has_blockers = any(s.blockers for s in sphere_sections)
        has_achievements = any(getattr(s, 'achievements', None) for s in sphere_sections)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π HPI –∏ –æ—Ü–µ–Ω–∫–∏
        latest_report = history[-1] if history else None
        latest_hpi = latest_report['hpi'] if latest_report else 0.0
        latest_scores = latest_report['scores'] if latest_report else {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = "üü¢" if latest_hpi >= 70 else "üü°" if latest_hpi >= 50 else "üî¥"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞
        trend_path = generate_trend_chart(history)
        if not trend_path:
            self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞")
            trend_path = "../reports_final/images/trend.png"  # Fallback –ø—É—Ç—å
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        result.append(f"# HPI Dashboard v{version}\n\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
        result.extend([
            f"## Human Performance Index: {latest_hpi:.1f} {status}\n",
            "> [!note]- üìà –î–∏–Ω–∞–º–∏–∫–∞ HPI",
            f"> ![–î–∏–Ω–∞–º–∏–∫–∞ HPI]({trend_path})",
            ">\n",
            "> [!note]- ‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –ø–æ —Å—Ñ–µ—Ä–∞–º",
            "> ![–ë–∞–ª–∞–Ω—Å –ø–æ —Å—Ñ–µ—Ä–∞–º](../reports_final/images/2025-06-14_radar.png)",
            ">",
            "> | –î–∞—Ç–∞ | üíñ | üè° | ü§ù | üíº | ‚ôÇÔ∏è | üß† | üé® | üí∞ |",
            "> |:---|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|"
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ –¥–∞—Ç—ã —Å–≤–µ—Ä—Ö—É)
        for report in reversed(history):
            scores = report['scores']
            result.append(
                f"> | {report['date']} | " +
                f"{scores.get('–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏', 0.0):.1f} | " +
                f"{scores.get('–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏', 0.0):.1f} | " +
                f"{scores.get('–î—Ä—É–∑—å—è', 0.0):.1f} | " +
                f"{scores.get('–ö–∞—Ä—å–µ—Ä–∞', 0.0):.1f} | " +
                f"{scores.get('–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ', 0.0):.1f} | " +
                f"{scores.get('–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ', 0.0):.1f} | " +
                f"{scores.get('–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è', 0.0):.1f} | " +
                f"{scores.get('–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ', 0.0):.1f} |"
            )
        
        result.append("\n---\n")
        result.append("## PRO-—Ä–∞–∑–¥–µ–ª—ã\n")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ —Å—Ñ–µ—Ä –¥–ª—è master_order
        normalizer = SphereNormalizer()
        master_order = [
            normalizer.normalize('–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ª—é–±–∏–º—ã–º–∏'),
            normalizer.normalize('–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–æ–¥–Ω—ã–º–∏'),
            normalizer.normalize('–î—Ä—É–∑—å—è'),
            normalizer.normalize('–ö–∞—Ä—å–µ—Ä–∞'),
            normalizer.normalize('–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ'),
            normalizer.normalize('–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ'),
            normalizer.normalize('–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è'),
            normalizer.normalize('–ë–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ')
        ]

        # –ü—Ä–æ–±–ª–µ–º—ã
        result.append("> [!example]- <span style='color:#b37feb'>üõë –ú–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã</span>")
        result.append("> | –°—Ñ–µ—Ä–∞ | –ü—Ä–æ–±–ª–µ–º–∞ |")
        result.append("> |:---:|:---|")
        for section in sphere_sections:
            emoji = section.emoji
            for problem in section.problems:
                result.append(f"> | {emoji} | {problem} |")
        result.append("\n")
        # –¶–µ–ª–∏
        result.append("> [!example]- <span style='color:#b37feb'>üéØ –ú–æ–∏ —Ü–µ–ª–∏</span>")
        result.append("> | –°—Ñ–µ—Ä–∞ | –¶–µ–ª—å |")
        result.append("> |:---:|:---|")
        for section in sphere_sections:
            emoji = section.emoji
            for goal in section.goals:
                result.append(f"> | {emoji} | {goal} |")
        result.append("\n")
        # –ë–ª–æ–∫–µ—Ä—ã
        result.append("> [!example]- <span style='color:#b37feb'>üöß –ú–æ–∏ –±–ª–æ–∫–µ—Ä—ã</span>")
        result.append("> | –°—Ñ–µ—Ä–∞ | –ë–ª–æ–∫–µ—Ä |")
        result.append("> |:---:|:---|")
        for section in sphere_sections:
            emoji = section.emoji
            for blocker in section.blockers:
                result.append(f"> | {emoji} | {blocker} |")
        result.append("\n")
        # –ú–µ—Ç—Ä–∏–∫–∏
        result.append("> [!example]- <span style='color:#b37feb'>üìä –ú–æ–∏ –º–µ—Ç—Ä–∏–∫–∏</span>")
        result.append("> | –°—Ñ–µ—Ä–∞ | –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ | –¶–µ–ª—å | –ò–∑–º–µ–Ω–µ–Ω–∏–µ |")
        result.append("> |:---:|:---|:---:|:---:|:---:|")
        for section in sphere_sections:
            emoji = section.emoji
            for metric in section.metrics:
                change = metric.current_value - (metric.previous_value or 0)
                percent = metric.change_percent
                result.append(f"> | {emoji} | {metric.name} | {metric.current_value} | {metric.target_value} | {change:+.1f} ({percent:+.1f}%) |")
        result.append("\n")
        # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        result.append("> [!example]- üí° –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        result.append("> | –°—Ñ–µ—Ä–∞ | –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è |")
        result.append("> |:---:|:---|")
        for sphere_name in master_order:
            section = sections.get(sphere_name)
            emoji = section.emoji if section else ''
            rec = section.recommendation if section else None
            if not rec:
                result.append(f"> | {emoji} | –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ |")
                continue
            if isinstance(rec, str):
                result.append(f"> | {emoji} | {rec} |")
            elif hasattr(rec, 'title') and getattr(rec, 'title'):
                result.append(f"> | {emoji} | {rec.title} |")
            else:
                result.append(f"> | {emoji} | {str(rec)} |")
        result.append("\n")
        # AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏)
        if not openai_error:
            ai_recs = sections.get('ai_recommendations')
            if ai_recs:
                result.append("")
                result.append("> [!example]- <span style='color:#b37feb'>ü§ñ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</span>")
                # ... (–æ—Å—Ç–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –≤—ã–≤–æ–¥–∞ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å)
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –æ—à–∏–±–∫–∏ OpenAI, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
        if openai_error:
            result.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ callout
            result.append("> [!danger]- <span style='color:#ff7875'>‚ùó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ OpenAI</span>")
            result.append("> | –¢–∏–ø    | –°–æ–æ–±—â–µ–Ω–∏–µ                |\n> |:------:|:-------------------------|\n> | OpenAI | " + str(openai_error).replace("\n", " ") + " |")
            result.append("---")

        return "\n".join(result) 