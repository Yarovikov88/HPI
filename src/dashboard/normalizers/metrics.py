"""
Модуль для нормализации названий метрик.
"""

import re
from typing import Dict, TypedDict


class TranslitMap(TypedDict):
    """Тип для карты транслитерации."""

    ru: str
    en: str


class MetricNormalizer:
    """Нормализатор названий метрик."""

    def __init__(self):
        """Инициализация нормализатора."""
        self._metric_aliases: Dict[str, str] = {
            "профессиональное_развитие": "professional_development",
            "проектная_активность": "project_activity",
            "физическая_активность": "physical_activity",
            "качество_сна": "sleep_quality",
            "ментальное_состояние": "mental_state",
            "отношения_с_партнером": "partner_relationship",
            "семейные_отношения": "family_relationship",
            "общение_с_друзьями": "friends_communication",
            "творческая_активность": "creative_activity",
            "финансовая_стабильность": "financial_stability",
        }

        # Добавляем дополнительные алиасы
        additional_aliases: Dict[str, str] = {
            # Отношения с любимыми
            "совместные_ужины_в_неделю": "часов_вместе_в_неделю",
            "часы_вместе_в_неделю": "часов_вместе_в_неделю",
            "число_совместных_мероприятий_в_месяц": "число_совместных_активностей",
            "число_совместных_активностей": "число_совместных_активностей",
            "качество_общения_1_10": "качество_общения",
            "качество_общения": "качество_общения",
            # Отношения с родными
            "звонки_родителям_в_неделю": "звонков_родителям_в_неделю",
            "звонков_родителям_в_неделю": "звонков_родителям_в_неделю",
            "семейных_встреч_в_месяц": "семейных_встреч_в_месяц",
            "длительность_общения_в_неделю_часов": ("длительность_общения_в_неделю"),
            "длительность_общения_в_неделю": "длительность_общения_в_неделю",
            # Друзья
            "встречи_с_друзьями_в_месяц": "встреч_с_друзьями_в_месяц",
            "встреч_с_друзьями_в_месяц": "встреч_с_друзьями_в_месяц",
            "новых_знакомств_в_месяц": "новых_знакомств_в_месяц",
            "время_на_общение_в_неделю_часов": "время_на_общение_в_неделю",
            "время_на_общение_в_неделю": "время_на_общение_в_неделю",
            # Карьера
            "часов_обучения_в_неделю": "часов_обучения_в_неделю",
            "новых_навыков_освоено_в_квартал": "новых_навыков_освоено",
            "новых_навыков_освоено": "новых_навыков_освоено",
            "доход_в_месяц_тыс_руб": "доход_в_месяц",
            "доход_в_месяц": "доход_в_месяц",
            # Физическое здоровье
            "тренировок_в_неделю": "тренировок_в_неделю",
            "средний_пульс_в_покое": "средний_пульс_в_покое",
            # Ментальное здоровье
            "минут_медитации_в_день": "минут_медитации_в_день",
            "уровень_стресса_1_10": "уровень_стресса",
            "уровень_стресса": "уровень_стресса",
            "качество_отдыха_1_10": "качество_отдыха",
            "качество_отдыха": "качество_отдыха",
            # Хобби и увлечения
            "часов_на_хобби_в_неделю": "часов_на_хобби_в_неделю",
            "новых_проектов_начато_в_месяц": "новых_проектов_начато",
            "новых_проектов_начато": "новых_проектов_начато",
            "удовлетворенность_хобби_1_10": "удовлетворенность_хобби",
            "удовлетворенность_хобби": "удовлетворенность_хобби",
            # Благосостояние
            "сбережения_проц_от_дохода": "сбережения",
            "сбережения": "сбережения",
            "пассивный_доход_в_месяц_тыс_руб": "пассивный_доход_в_месяц",
            "пассивный_доход_в_месяц": "пассивный_доход_в_месяц",
            "финансовая_стабильность_1_10": "финансовая_стабильность",
            "финансовая_стабильность": "финансовая_стабильность",
        }

        self._metric_aliases.update(additional_aliases)

        # Карта транслитерации
        self._translit_map: Dict[str, TranslitMap] = {
            "а": {"ru": "а", "en": "a"},
            "б": {"ru": "б", "en": "b"},
            "в": {"ru": "в", "en": "v"},
            "г": {"ru": "г", "en": "g"},
            "д": {"ru": "д", "en": "d"},
            "е": {"ru": "е", "en": "e"},
            "ё": {"ru": "ё", "en": "e"},
            "ж": {"ru": "ж", "en": "zh"},
            "з": {"ru": "з", "en": "z"},
            "и": {"ru": "и", "en": "i"},
            "й": {"ru": "й", "en": "y"},
            "к": {"ru": "к", "en": "k"},
            "л": {"ru": "л", "en": "l"},
            "м": {"ru": "м", "en": "m"},
            "н": {"ru": "н", "en": "n"},
            "о": {"ru": "о", "en": "o"},
            "п": {"ru": "п", "en": "p"},
            "р": {"ru": "р", "en": "r"},
            "с": {"ru": "с", "en": "s"},
            "т": {"ru": "т", "en": "t"},
            "у": {"ru": "у", "en": "u"},
            "ф": {"ru": "ф", "en": "f"},
            "х": {"ru": "х", "en": "h"},
            "ц": {"ru": "ц", "en": "ts"},
            "ч": {"ru": "ч", "en": "ch"},
            "ш": {"ru": "ш", "en": "sh"},
            "щ": {"ru": "щ", "en": "sch"},
            "ъ": {"ru": "ъ", "en": ""},
            "ы": {"ru": "ы", "en": "y"},
            "ь": {"ru": "ь", "en": ""},
            "э": {"ru": "э", "en": "e"},
            "ю": {"ru": "ю", "en": "yu"},
            "я": {"ru": "я", "en": "ya"},
        }

    def normalize(self, name: str) -> str:
        """
        Нормализует название метрики.

        Args:
            name: Название метрики

        Returns:
            Нормализованное название
        """
        if not name:
            return ""

        # Приводим к нижнему регистру и заменяем пробелы на подчеркивания
        normalized: str = name.lower().strip()
        normalized = re.sub(r"\s+", "_", normalized)

        # Транслитерация русских букв (если есть)
        translit_table = str.maketrans(
            "".join(item["ru"] for item in self._translit_map.values()),
            "".join(item["en"] for item in self._translit_map.values()),
        )
        normalized = normalized.translate(translit_table)

        # Проверяем алиасы
        if normalized in self._metric_aliases:
            return self._metric_aliases[normalized]

        # Убираем все символы, кроме букв, цифр и подчеркиваний
        normalized = re.sub(r"[^a-z0-9_]", "", normalized)

        return normalized

    def add_replacement(self, old: str, new: str) -> None:
        """
        Добавляет новое правило замены в нормализатор.

        Args:
            old: Что заменять
            new: На что заменять
        """
        self._metric_aliases[old.lower()] = new.lower()

    def remove_replacement(self, old: str) -> None:
        """
        Удаляет правило замены из нормализатора.

        Args:
            old: Какое правило удалить
        """
        self._metric_aliases.pop(old.lower(), None)

    def get_replacements(self) -> Dict[str, str]:
        """
        Возвращает текущий словарь замен.

        Returns:
            Копия словаря текущих правил замены
        """
        return dict(self._metric_aliases)
